
virtUSBComtoPA9PA10COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000725c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073dc  080073dc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080073dc  080073dc  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073dc  080073dc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080073e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  2000017c  08007560  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013cc  08007560  000213cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a40  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000323e  00000000  00000000  00036be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe0  00000000  00000000  0003af90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a9de  00000000  00000000  0003bf70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010df2  00000000  00000000  0005694e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e7a2  00000000  00000000  00067740  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000474c  00000000  00000000  000f5f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007350 	.word	0x08007350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007350 	.word	0x08007350

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa04 	bl	800055c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f88c 	bl	8000274 <MX_GPIO_Init>
  MX_USART1_Init();
 800015c:	f000 f85e 	bl	800021c <MX_USART1_Init>
  MX_USB_DEVICE_Init();
 8000160:	f006 fc54 	bl	8006a0c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b094      	sub	sp, #80	; 0x50
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f007 f8e3 	bl	8007340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	f107 0314 	add.w	r3, r7, #20
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	605a      	str	r2, [r3, #4]
 8000184:	609a      	str	r2, [r3, #8]
 8000186:	60da      	str	r2, [r3, #12]
 8000188:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 ffbd 	bl	800213c <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c8:	f000 f888 	bl	80002dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001e2:	f107 0314 	add.w	r3, r7, #20
 80001e6:	2101      	movs	r1, #1
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 fa27 	bl	800263c <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f4:	f000 f872 	bl	80002dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f8:	2310      	movs	r3, #16
 80001fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80001fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000200:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fbe5 	bl	80029d4 <HAL_RCCEx_PeriphCLKConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000210:	f000 f864 	bl	80002dc <Error_Handler>
  }
}
 8000214:	bf00      	nop
 8000216:	3750      	adds	r7, #80	; 0x50
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <MX_USART1_Init+0x50>)
 8000222:	4a13      	ldr	r2, [pc, #76]	; (8000270 <MX_USART1_Init+0x54>)
 8000224:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <MX_USART1_Init+0x50>)
 8000228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800022c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <MX_USART1_Init+0x50>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <MX_USART1_Init+0x50>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MX_USART1_Init+0x50>)
 800023c:	2200      	movs	r2, #0
 800023e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <MX_USART1_Init+0x50>)
 8000242:	220c      	movs	r2, #12
 8000244:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <MX_USART1_Init+0x50>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <MX_USART1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <MX_USART1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <MX_USART1_Init+0x50>)
 800025a:	f002 febb 	bl	8002fd4 <HAL_USART_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000264:	f000 f83a 	bl	80002dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200003bc 	.word	0x200003bc
 8000270:	40013800 	.word	0x40013800

08000274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <MX_GPIO_Init+0x40>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <MX_GPIO_Init+0x40>)
 8000280:	f043 0320 	orr.w	r3, r3, #32
 8000284:	6193      	str	r3, [r2, #24]
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <MX_GPIO_Init+0x40>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f003 0320 	and.w	r3, r3, #32
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <MX_GPIO_Init+0x40>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <MX_GPIO_Init+0x40>)
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	6193      	str	r3, [r2, #24]
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <MX_GPIO_Init+0x40>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f003 0304 	and.w	r3, r3, #4
 80002a6:	603b      	str	r3, [r7, #0]
 80002a8:	683b      	ldr	r3, [r7, #0]

}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	40021000 	.word	0x40021000

080002b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d101      	bne.n	80002ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002ca:	f000 f95d 	bl	8000588 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40012c00 	.word	0x40012c00

080002dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <Error_Handler+0x6>

080002e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <HAL_MspInit+0x5c>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	4a14      	ldr	r2, [pc, #80]	; (8000340 <HAL_MspInit+0x5c>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6193      	str	r3, [r2, #24]
 80002f6:	4b12      	ldr	r3, [pc, #72]	; (8000340 <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
 8000300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_MspInit+0x5c>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <HAL_MspInit+0x5c>)
 8000308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800030c:	61d3      	str	r3, [r2, #28]
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_MspInit+0x60>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	4a04      	ldr	r2, [pc, #16]	; (8000344 <HAL_MspInit+0x60>)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	40021000 	.word	0x40021000
 8000344:	40010000 	.word	0x40010000

08000348 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a1c      	ldr	r2, [pc, #112]	; (80003d4 <HAL_USART_MspInit+0x8c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d131      	bne.n	80003cc <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <HAL_USART_MspInit+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a1a      	ldr	r2, [pc, #104]	; (80003d8 <HAL_USART_MspInit+0x90>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <HAL_USART_MspInit+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_USART_MspInit+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <HAL_USART_MspInit+0x90>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_USART_MspInit+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000398:	f44f 7340 	mov.w	r3, #768	; 0x300
 800039c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800039e:	2302      	movs	r3, #2
 80003a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a2:	2303      	movs	r3, #3
 80003a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	4619      	mov	r1, r3
 80003ac:	480b      	ldr	r0, [pc, #44]	; (80003dc <HAL_USART_MspInit+0x94>)
 80003ae:	f000 f9e7 	bl	8000780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	4619      	mov	r1, r3
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <HAL_USART_MspInit+0x94>)
 80003c8:	f000 f9da 	bl	8000780 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80003cc:	bf00      	nop
 80003ce:	3720      	adds	r7, #32
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40013800 	.word	0x40013800
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010800 	.word	0x40010800

080003e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08c      	sub	sp, #48	; 0x30
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80003f0:	2200      	movs	r2, #0
 80003f2:	6879      	ldr	r1, [r7, #4]
 80003f4:	2019      	movs	r0, #25
 80003f6:	f000 f998 	bl	800072a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80003fa:	2019      	movs	r0, #25
 80003fc:	f000 f9b1 	bl	8000762 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <HAL_InitTick+0x9c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a1d      	ldr	r2, [pc, #116]	; (800047c <HAL_InitTick+0x9c>)
 8000406:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <HAL_InitTick+0x9c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000418:	f107 0210 	add.w	r2, r7, #16
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	4611      	mov	r1, r2
 8000422:	4618      	mov	r0, r3
 8000424:	f002 fa88 	bl	8002938 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000428:	f002 fa72 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 800042c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800042e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000430:	4a13      	ldr	r2, [pc, #76]	; (8000480 <HAL_InitTick+0xa0>)
 8000432:	fba2 2303 	umull	r2, r3, r2, r3
 8000436:	0c9b      	lsrs	r3, r3, #18
 8000438:	3b01      	subs	r3, #1
 800043a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <HAL_InitTick+0xa4>)
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <HAL_InitTick+0xa8>)
 8000440:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <HAL_InitTick+0xa4>)
 8000444:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000448:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <HAL_InitTick+0xa4>)
 800044c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800044e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_InitTick+0xa4>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <HAL_InitTick+0xa4>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <HAL_InitTick+0xa4>)
 800045e:	f002 fb6f 	bl	8002b40 <HAL_TIM_Base_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d104      	bne.n	8000472 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000468:	4806      	ldr	r0, [pc, #24]	; (8000484 <HAL_InitTick+0xa4>)
 800046a:	f002 fbc1 	bl	8002bf0 <HAL_TIM_Base_Start_IT>
 800046e:	4603      	mov	r3, r0
 8000470:	e000      	b.n	8000474 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000472:	2301      	movs	r3, #1
}
 8000474:	4618      	mov	r0, r3
 8000476:	3730      	adds	r7, #48	; 0x30
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	431bde83 	.word	0x431bde83
 8000484:	20000400 	.word	0x20000400
 8000488:	40012c00 	.word	0x40012c00

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <NMI_Handler+0x4>

08000492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler+0x4>

080004aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
	...

080004dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004e2:	f000 fbd8 	bl	8000c96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200010e0 	.word	0x200010e0

080004f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <TIM1_UP_IRQHandler+0x10>)
 80004f6:	f002 fbcd 	bl	8002c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000400 	.word	0x20000400

08000504 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000510:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000512:	e003      	b.n	800051c <LoopCopyDataInit>

08000514 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000516:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000518:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800051a:	3104      	adds	r1, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000520:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000522:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000524:	d3f6      	bcc.n	8000514 <CopyDataInit>
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000528:	e002      	b.n	8000530 <LoopFillZerobss>

0800052a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800052c:	f842 3b04 	str.w	r3, [r2], #4

08000530 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000532:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000534:	d3f9      	bcc.n	800052a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000536:	f7ff ffe5 	bl	8000504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053a:	f006 fedd 	bl	80072f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053e:	f7ff fe05 	bl	800014c <main>
  bx lr
 8000542:	4770      	bx	lr
  ldr r3, =_sidata
 8000544:	080073e4 	.word	0x080073e4
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800054c:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000550:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000554:	200013cc 	.word	0x200013cc

08000558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC1_2_IRQHandler>
	...

0800055c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_Init+0x28>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_Init+0x28>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056c:	2003      	movs	r0, #3
 800056e:	f000 f8d1 	bl	8000714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ff34 	bl	80003e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000578:	f7ff feb4 	bl	80002e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40022000 	.word	0x40022000

08000588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <HAL_IncTick+0x1c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_IncTick+0x20>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x20>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000448 	.word	0x20000448

080005ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b02      	ldr	r3, [pc, #8]	; (80005bc <HAL_GetTick+0x10>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	20000448 	.word	0x20000448

080005c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f003 0307 	and.w	r3, r3, #7
 80005ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <__NVIC_SetPriorityGrouping+0x44>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <__NVIC_SetPriorityGrouping+0x44>)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	60d3      	str	r3, [r2, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__NVIC_GetPriorityGrouping+0x18>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	f003 0307 	and.w	r3, r3, #7
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	db0b      	blt.n	800064e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 021f 	and.w	r2, r3, #31
 800063c:	4906      	ldr	r1, [pc, #24]	; (8000658 <__NVIC_EnableIRQ+0x34>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	db0a      	blt.n	8000686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	490c      	ldr	r1, [pc, #48]	; (80006a8 <__NVIC_SetPriority+0x4c>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	0112      	lsls	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	440b      	add	r3, r1
 8000680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000684:	e00a      	b.n	800069c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4908      	ldr	r1, [pc, #32]	; (80006ac <__NVIC_SetPriority+0x50>)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	f003 030f 	and.w	r3, r3, #15
 8000692:	3b04      	subs	r3, #4
 8000694:	0112      	lsls	r2, r2, #4
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	440b      	add	r3, r1
 800069a:	761a      	strb	r2, [r3, #24]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4
 80006d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d902      	bls.n	80006e0 <NVIC_EncodePriority+0x30>
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b03      	subs	r3, #3
 80006de:	e000      	b.n	80006e2 <NVIC_EncodePriority+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 32ff 	mov.w	r2, #4294967295
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	43da      	mvns	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	401a      	ands	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f8:	f04f 31ff 	mov.w	r1, #4294967295
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	43d9      	mvns	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff4f 	bl	80005c0 <__NVIC_SetPriorityGrouping>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800072a:	b580      	push	{r7, lr}
 800072c:	b086      	sub	sp, #24
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800073c:	f7ff ff64 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	6978      	ldr	r0, [r7, #20]
 8000748:	f7ff ffb2 	bl	80006b0 <NVIC_EncodePriority>
 800074c:	4602      	mov	r2, r0
 800074e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff81 	bl	800065c <__NVIC_SetPriority>
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff57 	bl	8000624 <__NVIC_EnableIRQ>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000780:	b480      	push	{r7}
 8000782:	b08b      	sub	sp, #44	; 0x2c
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000792:	e127      	b.n	80009e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000794:	2201      	movs	r2, #1
 8000796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	69fa      	ldr	r2, [r7, #28]
 80007a4:	4013      	ands	r3, r2
 80007a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007a8:	69ba      	ldr	r2, [r7, #24]
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	f040 8116 	bne.w	80009de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b12      	cmp	r3, #18
 80007b8:	d034      	beq.n	8000824 <HAL_GPIO_Init+0xa4>
 80007ba:	2b12      	cmp	r3, #18
 80007bc:	d80d      	bhi.n	80007da <HAL_GPIO_Init+0x5a>
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d02b      	beq.n	800081a <HAL_GPIO_Init+0x9a>
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d804      	bhi.n	80007d0 <HAL_GPIO_Init+0x50>
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d031      	beq.n	800082e <HAL_GPIO_Init+0xae>
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d01c      	beq.n	8000808 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007ce:	e048      	b.n	8000862 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d043      	beq.n	800085c <HAL_GPIO_Init+0xdc>
 80007d4:	2b11      	cmp	r3, #17
 80007d6:	d01b      	beq.n	8000810 <HAL_GPIO_Init+0x90>
          break;
 80007d8:	e043      	b.n	8000862 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007da:	4a89      	ldr	r2, [pc, #548]	; (8000a00 <HAL_GPIO_Init+0x280>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d026      	beq.n	800082e <HAL_GPIO_Init+0xae>
 80007e0:	4a87      	ldr	r2, [pc, #540]	; (8000a00 <HAL_GPIO_Init+0x280>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d806      	bhi.n	80007f4 <HAL_GPIO_Init+0x74>
 80007e6:	4a87      	ldr	r2, [pc, #540]	; (8000a04 <HAL_GPIO_Init+0x284>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d020      	beq.n	800082e <HAL_GPIO_Init+0xae>
 80007ec:	4a86      	ldr	r2, [pc, #536]	; (8000a08 <HAL_GPIO_Init+0x288>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d01d      	beq.n	800082e <HAL_GPIO_Init+0xae>
          break;
 80007f2:	e036      	b.n	8000862 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007f4:	4a85      	ldr	r2, [pc, #532]	; (8000a0c <HAL_GPIO_Init+0x28c>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d019      	beq.n	800082e <HAL_GPIO_Init+0xae>
 80007fa:	4a85      	ldr	r2, [pc, #532]	; (8000a10 <HAL_GPIO_Init+0x290>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d016      	beq.n	800082e <HAL_GPIO_Init+0xae>
 8000800:	4a84      	ldr	r2, [pc, #528]	; (8000a14 <HAL_GPIO_Init+0x294>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d013      	beq.n	800082e <HAL_GPIO_Init+0xae>
          break;
 8000806:	e02c      	b.n	8000862 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	623b      	str	r3, [r7, #32]
          break;
 800080e:	e028      	b.n	8000862 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	3304      	adds	r3, #4
 8000816:	623b      	str	r3, [r7, #32]
          break;
 8000818:	e023      	b.n	8000862 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	3308      	adds	r3, #8
 8000820:	623b      	str	r3, [r7, #32]
          break;
 8000822:	e01e      	b.n	8000862 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	330c      	adds	r3, #12
 800082a:	623b      	str	r3, [r7, #32]
          break;
 800082c:	e019      	b.n	8000862 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000836:	2304      	movs	r3, #4
 8000838:	623b      	str	r3, [r7, #32]
          break;
 800083a:	e012      	b.n	8000862 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d105      	bne.n	8000850 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000844:	2308      	movs	r3, #8
 8000846:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	611a      	str	r2, [r3, #16]
          break;
 800084e:	e008      	b.n	8000862 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000850:	2308      	movs	r3, #8
 8000852:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	69fa      	ldr	r2, [r7, #28]
 8000858:	615a      	str	r2, [r3, #20]
          break;
 800085a:	e002      	b.n	8000862 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
          break;
 8000860:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	2bff      	cmp	r3, #255	; 0xff
 8000866:	d801      	bhi.n	800086c <HAL_GPIO_Init+0xec>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	e001      	b.n	8000870 <HAL_GPIO_Init+0xf0>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3304      	adds	r3, #4
 8000870:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	2bff      	cmp	r3, #255	; 0xff
 8000876:	d802      	bhi.n	800087e <HAL_GPIO_Init+0xfe>
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	e002      	b.n	8000884 <HAL_GPIO_Init+0x104>
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	3b08      	subs	r3, #8
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	210f      	movs	r1, #15
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	401a      	ands	r2, r3
 8000896:	6a39      	ldr	r1, [r7, #32]
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	431a      	orrs	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f000 8096 	beq.w	80009de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008b2:	4b59      	ldr	r3, [pc, #356]	; (8000a18 <HAL_GPIO_Init+0x298>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a58      	ldr	r2, [pc, #352]	; (8000a18 <HAL_GPIO_Init+0x298>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <HAL_GPIO_Init+0x298>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008ca:	4a54      	ldr	r2, [pc, #336]	; (8000a1c <HAL_GPIO_Init+0x29c>)
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	3302      	adds	r3, #2
 80008d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a4b      	ldr	r2, [pc, #300]	; (8000a20 <HAL_GPIO_Init+0x2a0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d013      	beq.n	800091e <HAL_GPIO_Init+0x19e>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a4a      	ldr	r2, [pc, #296]	; (8000a24 <HAL_GPIO_Init+0x2a4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d00d      	beq.n	800091a <HAL_GPIO_Init+0x19a>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a49      	ldr	r2, [pc, #292]	; (8000a28 <HAL_GPIO_Init+0x2a8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d007      	beq.n	8000916 <HAL_GPIO_Init+0x196>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a48      	ldr	r2, [pc, #288]	; (8000a2c <HAL_GPIO_Init+0x2ac>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <HAL_GPIO_Init+0x192>
 800090e:	2303      	movs	r3, #3
 8000910:	e006      	b.n	8000920 <HAL_GPIO_Init+0x1a0>
 8000912:	2304      	movs	r3, #4
 8000914:	e004      	b.n	8000920 <HAL_GPIO_Init+0x1a0>
 8000916:	2302      	movs	r3, #2
 8000918:	e002      	b.n	8000920 <HAL_GPIO_Init+0x1a0>
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <HAL_GPIO_Init+0x1a0>
 800091e:	2300      	movs	r3, #0
 8000920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000922:	f002 0203 	and.w	r2, r2, #3
 8000926:	0092      	lsls	r2, r2, #2
 8000928:	4093      	lsls	r3, r2
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000930:	493a      	ldr	r1, [pc, #232]	; (8000a1c <HAL_GPIO_Init+0x29c>)
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	089b      	lsrs	r3, r3, #2
 8000936:	3302      	adds	r3, #2
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d006      	beq.n	8000958 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4938      	ldr	r1, [pc, #224]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	600b      	str	r3, [r1, #0]
 8000956:	e006      	b.n	8000966 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000958:	4b35      	ldr	r3, [pc, #212]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	43db      	mvns	r3, r3
 8000960:	4933      	ldr	r1, [pc, #204]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 8000962:	4013      	ands	r3, r2
 8000964:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d006      	beq.n	8000980 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000972:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	492e      	ldr	r1, [pc, #184]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	604b      	str	r3, [r1, #4]
 800097e:	e006      	b.n	800098e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	43db      	mvns	r3, r3
 8000988:	4929      	ldr	r1, [pc, #164]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 800098a:	4013      	ands	r3, r2
 800098c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	4924      	ldr	r1, [pc, #144]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	608b      	str	r3, [r1, #8]
 80009a6:	e006      	b.n	80009b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009a8:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	491f      	ldr	r1, [pc, #124]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80009b2:	4013      	ands	r3, r2
 80009b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80009c4:	68da      	ldr	r2, [r3, #12]
 80009c6:	491a      	ldr	r1, [pc, #104]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	60cb      	str	r3, [r1, #12]
 80009ce:	e006      	b.n	80009de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	4915      	ldr	r1, [pc, #84]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80009da:	4013      	ands	r3, r2
 80009dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	3301      	adds	r3, #1
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	fa22 f303 	lsr.w	r3, r2, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f47f aed0 	bne.w	8000794 <HAL_GPIO_Init+0x14>
  }
}
 80009f4:	bf00      	nop
 80009f6:	372c      	adds	r7, #44	; 0x2c
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	10210000 	.word	0x10210000
 8000a04:	10110000 	.word	0x10110000
 8000a08:	10120000 	.word	0x10120000
 8000a0c:	10310000 	.word	0x10310000
 8000a10:	10320000 	.word	0x10320000
 8000a14:	10220000 	.word	0x10220000
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010000 	.word	0x40010000
 8000a20:	40010800 	.word	0x40010800
 8000a24:	40010c00 	.word	0x40010c00
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	40011400 	.word	0x40011400
 8000a30:	40010400 	.word	0x40010400

08000a34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af06      	add	r7, sp, #24
 8000a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e0fd      	b.n	8000c42 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d106      	bne.n	8000a60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f006 f9a2 	bl	8006da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2203      	movs	r2, #3
 8000a64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fc11 	bl	8003294 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	687e      	ldr	r6, [r7, #4]
 8000a7a:	466d      	mov	r5, sp
 8000a7c:	f106 0410 	add.w	r4, r6, #16
 8000a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	602b      	str	r3, [r5, #0]
 8000a88:	1d33      	adds	r3, r6, #4
 8000a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f002 fbdb 	bl	8003248 <USB_CoreInit>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d005      	beq.n	8000aa4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e0ce      	b.n	8000c42 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fc0c 	bl	80032c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	e04c      	b.n	8000b50 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	440b      	add	r3, r1
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	440b      	add	r3, r1
 8000adc:	7bfa      	ldrb	r2, [r7, #15]
 8000ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ae0:	7bfa      	ldrb	r2, [r7, #15]
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	b298      	uxth	r0, r3
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	440b      	add	r3, r1
 8000af2:	3336      	adds	r3, #54	; 0x36
 8000af4:	4602      	mov	r2, r0
 8000af6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	440b      	add	r3, r1
 8000b08:	3303      	adds	r3, #3
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b0e:	7bfa      	ldrb	r2, [r7, #15]
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3338      	adds	r3, #56	; 0x38
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b22:	7bfa      	ldrb	r2, [r7, #15]
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	440b      	add	r3, r1
 8000b30:	333c      	adds	r3, #60	; 0x3c
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	440b      	add	r3, r1
 8000b44:	3340      	adds	r3, #64	; 0x40
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d3ad      	bcc.n	8000ab6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e044      	b.n	8000bea <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b60:	7bfa      	ldrb	r2, [r7, #15]
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	440b      	add	r3, r1
 8000b6e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	440b      	add	r3, r1
 8000bb0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bb8:	7bfa      	ldrb	r2, [r7, #15]
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bce:	7bfa      	ldrb	r2, [r7, #15]
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	3301      	adds	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	7bfa      	ldrb	r2, [r7, #15]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d3b5      	bcc.n	8000b60 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	687e      	ldr	r6, [r7, #4]
 8000bfc:	466d      	mov	r5, sp
 8000bfe:	f106 0410 	add.w	r4, r6, #16
 8000c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	602b      	str	r3, [r5, #0]
 8000c0a:	1d33      	adds	r3, r6, #4
 8000c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f002 fb66 	bl	80032e0 <USB_DevInit>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d005      	beq.n	8000c26 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00d      	b.n	8000c42 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 fb00 	bl	8005240 <USB_DevDisconnect>

  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d101      	bne.n	8000c60 <HAL_PCD_Start+0x16>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e016      	b.n	8000c8e <HAL_PCD_Start+0x44>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fafb 	bl	8003268 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000c72:	2101      	movs	r1, #1
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f006 fb08 	bl	800728a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fad4 	bl	800522c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b088      	sub	sp, #32
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 fad6 	bl	8005254 <USB_ReadInterrupts>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cb2:	d102      	bne.n	8000cba <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 fb61 	bl	800137c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fac8 	bl	8005254 <USB_ReadInterrupts>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cce:	d112      	bne.n	8000cf6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ce2:	b292      	uxth	r2, r2
 8000ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f006 f8d6 	bl	8006e9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f925 	bl	8000f40 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 faaa 	bl	8005254 <USB_ReadInterrupts>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d0a:	d10b      	bne.n	8000d24 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 fa93 	bl	8005254 <USB_ReadInterrupts>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d38:	d10b      	bne.n	8000d52 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d4c:	b292      	uxth	r2, r2
 8000d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fa7c 	bl	8005254 <USB_ReadInterrupts>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d66:	d126      	bne.n	8000db6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0204 	bic.w	r2, r2, #4
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0208 	bic.w	r2, r2, #8
 8000d92:	b292      	uxth	r2, r2
 8000d94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f006 f8b7 	bl	8006f0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000db0:	b292      	uxth	r2, r2
 8000db2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f004 fa4a 	bl	8005254 <USB_ReadInterrupts>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dca:	f040 8084 	bne.w	8000ed6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	77fb      	strb	r3, [r7, #31]
 8000dd2:	e011      	b.n	8000df8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	7ffb      	ldrb	r3, [r7, #31]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	441a      	add	r2, r3
 8000de0:	7ffb      	ldrb	r3, [r7, #31]
 8000de2:	8812      	ldrh	r2, [r2, #0]
 8000de4:	b292      	uxth	r2, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	f107 0120 	add.w	r1, r7, #32
 8000dec:	440b      	add	r3, r1
 8000dee:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000df2:	7ffb      	ldrb	r3, [r7, #31]
 8000df4:	3301      	adds	r3, #1
 8000df6:	77fb      	strb	r3, [r7, #31]
 8000df8:	7ffb      	ldrb	r3, [r7, #31]
 8000dfa:	2b07      	cmp	r3, #7
 8000dfc:	d9ea      	bls.n	8000dd4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0201 	orr.w	r2, r2, #1
 8000e10:	b292      	uxth	r2, r2
 8000e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0201 	bic.w	r2, r2, #1
 8000e28:	b292      	uxth	r2, r2
 8000e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000e2e:	bf00      	nop
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f6      	beq.n	8000e30 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e54:	b292      	uxth	r2, r2
 8000e56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	77fb      	strb	r3, [r7, #31]
 8000e5e:	e010      	b.n	8000e82 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	4611      	mov	r1, r2
 8000e68:	7ffa      	ldrb	r2, [r7, #31]
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	440a      	add	r2, r1
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	f107 0120 	add.w	r1, r7, #32
 8000e74:	440b      	add	r3, r1
 8000e76:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000e7a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000e7c:	7ffb      	ldrb	r3, [r7, #31]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	77fb      	strb	r3, [r7, #31]
 8000e82:	7ffb      	ldrb	r3, [r7, #31]
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	d9eb      	bls.n	8000e60 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0208 	orr.w	r2, r2, #8
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0204 	orr.w	r2, r2, #4
 8000eca:	b292      	uxth	r2, r2
 8000ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f006 f801 	bl	8006ed8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 f9ba 	bl	8005254 <USB_ReadInterrupts>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eea:	d10e      	bne.n	8000f0a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000efe:	b292      	uxth	r2, r2
 8000f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f005 ffba 	bl	8006e7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 f9a0 	bl	8005254 <USB_ReadInterrupts>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f1e:	d10b      	bne.n	8000f38 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f32:	b292      	uxth	r2, r2
 8000f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_PCD_SetAddress+0x1a>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e013      	b.n	8000f82 <HAL_PCD_SetAddress+0x42>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	78fa      	ldrb	r2, [r7, #3]
 8000f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	78fa      	ldrb	r2, [r7, #3]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 f947 	bl	8005206 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	4608      	mov	r0, r1
 8000f94:	4611      	mov	r1, r2
 8000f96:	461a      	mov	r2, r3
 8000f98:	4603      	mov	r3, r0
 8000f9a:	70fb      	strb	r3, [r7, #3]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	803b      	strh	r3, [r7, #0]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	da0e      	bge.n	8000fce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	705a      	strb	r2, [r3, #1]
 8000fcc:	e00e      	b.n	8000fec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	f003 0207 	and.w	r2, r3, #7
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000ff8:	883a      	ldrh	r2, [r7, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	78ba      	ldrb	r2, [r7, #2]
 8001002:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b29a      	uxth	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001016:	78bb      	ldrb	r3, [r7, #2]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d102      	bne.n	8001022 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_PCD_EP_Open+0xa6>
 800102c:	2302      	movs	r3, #2
 800102e:	e00e      	b.n	800104e <HAL_PCD_EP_Open+0xc4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68f9      	ldr	r1, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f002 f96e 	bl	8003320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800104c:	7afb      	ldrb	r3, [r7, #11]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001066:	2b00      	cmp	r3, #0
 8001068:	da0e      	bge.n	8001088 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2201      	movs	r2, #1
 8001084:	705a      	strb	r2, [r3, #1]
 8001086:	e00e      	b.n	80010a6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	f003 0207 	and.w	r2, r3, #7
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_PCD_EP_Close+0x6a>
 80010bc:	2302      	movs	r3, #2
 80010be:	e00e      	b.n	80010de <HAL_PCD_EP_Close+0x88>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fc90 	bl	80039f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	460b      	mov	r3, r1
 80010f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	f003 0207 	and.w	r2, r3, #7
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2200      	movs	r2, #0
 8001124:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	b2da      	uxtb	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	2b00      	cmp	r3, #0
 800113a:	d106      	bne.n	800114a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6979      	ldr	r1, [r7, #20]
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fe42 	bl	8003dcc <USB_EPStartXfer>
 8001148:	e005      	b.n	8001156 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6979      	ldr	r1, [r7, #20]
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fe3b 	bl	8003dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	f003 0207 	and.w	r2, r3, #7
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	460b      	mov	r3, r1
 800119c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2201      	movs	r2, #1
 80011d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6979      	ldr	r1, [r7, #20]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fde8 	bl	8003dcc <USB_EPStartXfer>
 80011fc:	e005      	b.n	800120a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6979      	ldr	r1, [r7, #20]
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fde1 	bl	8003dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	f003 0207 	and.w	r2, r3, #7
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d901      	bls.n	8001232 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e04c      	b.n	80012cc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001236:	2b00      	cmp	r3, #0
 8001238:	da0e      	bge.n	8001258 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2201      	movs	r2, #1
 8001254:	705a      	strb	r2, [r3, #1]
 8001256:	e00c      	b.n	8001272 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001258:	78fa      	ldrb	r2, [r7, #3]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	b2da      	uxtb	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_PCD_EP_SetStall+0x7e>
 800128e:	2302      	movs	r3, #2
 8001290:	e01c      	b.n	80012cc <HAL_PCD_EP_SetStall+0xb8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 feb3 	bl	800500c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d108      	bne.n	80012c2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80012ba:	4619      	mov	r1, r3
 80012bc:	4610      	mov	r0, r2
 80012be:	f003 ffd8 	bl	8005272 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	f003 020f 	and.w	r2, r3, #15
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d901      	bls.n	80012f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e040      	b.n	8001374 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da0e      	bge.n	8001318 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2201      	movs	r2, #1
 8001314:	705a      	strb	r2, [r3, #1]
 8001316:	e00e      	b.n	8001336 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 0207 	and.w	r2, r3, #7
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2200      	movs	r2, #0
 8001334:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	b2da      	uxtb	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_PCD_EP_ClrStall+0x82>
 8001352:	2302      	movs	r3, #2
 8001354:	e00e      	b.n	8001374 <HAL_PCD_EP_ClrStall+0xa0>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fea1 	bl	80050ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001384:	e2df      	b.n	8001946 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800138e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001390:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800139c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f040 8158 	bne.w	8001656 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d152      	bne.n	8001456 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80013bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013c0:	81fb      	strh	r3, [r7, #14]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3328      	adds	r3, #40	; 0x28
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	3302      	adds	r3, #2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	441a      	add	r2, r3
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001414:	2100      	movs	r1, #0
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f005 fd17 	bl	8006e4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 828e 	beq.w	8001946 <PCD_EP_ISR_Handler+0x5ca>
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 8289 	bne.w	8001946 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001440:	b2da      	uxtb	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b292      	uxth	r2, r2
 8001448:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001454:	e277      	b.n	8001946 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001466:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800146c:	2b00      	cmp	r3, #0
 800146e:	d034      	beq.n	80014da <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001478:	b29b      	uxth	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	3306      	adds	r3, #6
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	4413      	add	r3, r2
 800148e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f003 ff2e 	bl	8005310 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014c0:	4013      	ands	r3, r2
 80014c2:	823b      	strh	r3, [r7, #16]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	8a3a      	ldrh	r2, [r7, #16]
 80014ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ce:	b292      	uxth	r2, r2
 80014d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f005 fc8c 	bl	8006df0 <HAL_PCD_SetupStageCallback>
 80014d8:	e235      	b.n	8001946 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f280 8231 	bge.w	8001946 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014f0:	4013      	ands	r3, r2
 80014f2:	83bb      	strh	r3, [r7, #28]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	8bba      	ldrh	r2, [r7, #28]
 80014fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014fe:	b292      	uxth	r2, r2
 8001500:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800150a:	b29b      	uxth	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	3306      	adds	r3, #6
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	4413      	add	r3, r2
 8001520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d019      	beq.n	800156a <PCD_EP_ISR_Handler+0x1ee>
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	6959      	ldr	r1, [r3, #20]
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800154e:	b29b      	uxth	r3, r3
 8001550:	f003 fede 	bl	8005310 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	441a      	add	r2, r3
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001562:	2100      	movs	r1, #0
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f005 fc55 	bl	8006e14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	4413      	add	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d112      	bne.n	80015b8 <PCD_EP_ISR_Handler+0x23c>
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800159c:	b29a      	uxth	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	801a      	strh	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	e02f      	b.n	8001618 <PCD_EP_ISR_Handler+0x29c>
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b3e      	cmp	r3, #62	; 0x3e
 80015be:	d813      	bhi.n	80015e8 <PCD_EP_ISR_Handler+0x26c>
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <PCD_EP_ISR_Handler+0x25e>
 80015d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d6:	3301      	adds	r3, #1
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
 80015da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015dc:	b29b      	uxth	r3, r3
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	801a      	strh	r2, [r3, #0]
 80015e6:	e017      	b.n	8001618 <PCD_EP_ISR_Handler+0x29c>
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <PCD_EP_ISR_Handler+0x286>
 80015fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fe:	3b01      	subs	r3, #1
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
 8001602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001604:	b29b      	uxth	r3, r3
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	b29b      	uxth	r3, r3
 800160a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800160e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001612:	b29a      	uxth	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001628:	827b      	strh	r3, [r7, #18]
 800162a:	8a7b      	ldrh	r3, [r7, #18]
 800162c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001630:	827b      	strh	r3, [r7, #18]
 8001632:	8a7b      	ldrh	r3, [r7, #18]
 8001634:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001638:	827b      	strh	r3, [r7, #18]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	8a7b      	ldrh	r3, [r7, #18]
 8001640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	b29b      	uxth	r3, r3
 8001652:	8013      	strh	r3, [r2, #0]
 8001654:	e177      	b.n	8001946 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001668:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800166c:	2b00      	cmp	r3, #0
 800166e:	f280 80ea 	bge.w	8001846 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29a      	uxth	r2, r3
 8001684:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001688:	4013      	ands	r3, r2
 800168a:	853b      	strh	r3, [r7, #40]	; 0x28
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800169c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a0:	b292      	uxth	r2, r2
 80016a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016a4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d122      	bne.n	8001708 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	3306      	adds	r3, #6
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016ea:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80016ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8087 	beq.w	8001802 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	6959      	ldr	r1, [r3, #20]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	88da      	ldrh	r2, [r3, #6]
 8001700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001702:	f003 fe05 	bl	8005310 <USB_ReadPMA>
 8001706:	e07c      	b.n	8001802 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	78db      	ldrb	r3, [r3, #3]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d108      	bne.n	8001722 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001710:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001712:	461a      	mov	r2, r3
 8001714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f923 	bl	8001962 <HAL_PCD_EP_DB_Receive>
 800171c:	4603      	mov	r3, r0
 800171e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001720:	e06f      	b.n	8001802 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173c:	847b      	strh	r3, [r7, #34]	; 0x22
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	441a      	add	r2, r3
 800174c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800174e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800175e:	b29b      	uxth	r3, r3
 8001760:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d021      	beq.n	80017c0 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001784:	b29b      	uxth	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	3302      	adds	r3, #2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4413      	add	r3, r2
 800179a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80017a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d02a      	beq.n	8001802 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	6959      	ldr	r1, [r3, #20]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	891a      	ldrh	r2, [r3, #8]
 80017b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017ba:	f003 fda9 	bl	8005310 <USB_ReadPMA>
 80017be:	e020      	b.n	8001802 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	3306      	adds	r3, #6
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017e8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80017ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	6959      	ldr	r1, [r3, #20]
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	895a      	ldrh	r2, [r3, #10]
 80017fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017fe:	f003 fd87 	bl	8005310 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001808:	441a      	add	r2, r3
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001814:	441a      	add	r2, r3
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <PCD_EP_ISR_Handler+0x4b0>
 8001822:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d206      	bcs.n	800183a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f005 faee 	bl	8006e14 <HAL_PCD_DataOutStageCallback>
 8001838:	e005      	b.n	8001846 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fac3 	bl	8003dcc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001846:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184c:	2b00      	cmp	r3, #0
 800184e:	d07a      	beq.n	8001946 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800187a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800187e:	843b      	strh	r3, [r7, #32]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	441a      	add	r2, r3
 800188e:	8c3b      	ldrh	r3, [r7, #32]
 8001890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001898:	b29b      	uxth	r3, r3
 800189a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	78db      	ldrb	r3, [r3, #3]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d108      	bne.n	80018b6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d146      	bne.n	800193a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80018ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d141      	bne.n	800193a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	3302      	adds	r3, #2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018de:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	8bfb      	ldrh	r3, [r7, #30]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d906      	bls.n	80018f8 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	8bfb      	ldrh	r3, [r7, #30]
 80018f0:	1ad2      	subs	r2, r2, r3
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	619a      	str	r2, [r3, #24]
 80018f6:	e002      	b.n	80018fe <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f005 fa9c 	bl	8006e4a <HAL_PCD_DataInStageCallback>
 8001912:	e018      	b.n	8001946 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	8bfb      	ldrh	r3, [r7, #30]
 800191a:	441a      	add	r2, r3
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	69da      	ldr	r2, [r3, #28]
 8001924:	8bfb      	ldrh	r3, [r7, #30]
 8001926:	441a      	add	r2, r3
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001932:	4618      	mov	r0, r3
 8001934:	f002 fa4a 	bl	8003dcc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001938:	e005      	b.n	8001946 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800193a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800193c:	461a      	mov	r2, r3
 800193e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f91b 	bl	8001b7c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f6ff ad17 	blt.w	8001386 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3738      	adds	r7, #56	; 0x38
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b088      	sub	sp, #32
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	4613      	mov	r3, r2
 800196e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d07e      	beq.n	8001a78 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	3302      	adds	r3, #2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4413      	add	r3, r2
 8001998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	8b7b      	ldrh	r3, [r7, #26]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d306      	bcc.n	80019bc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	8b7b      	ldrh	r3, [r7, #26]
 80019b4:	1ad2      	subs	r2, r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	619a      	str	r2, [r3, #24]
 80019ba:	e002      	b.n	80019c2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d123      	bne.n	8001a12 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e4:	833b      	strh	r3, [r7, #24]
 80019e6:	8b3b      	ldrh	r3, [r7, #24]
 80019e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019ec:	833b      	strh	r3, [r7, #24]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	441a      	add	r2, r3
 80019fc:	8b3b      	ldrh	r3, [r7, #24]
 80019fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01f      	beq.n	8001a5c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a36:	82fb      	strh	r3, [r7, #22]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	441a      	add	r2, r3
 8001a46:	8afb      	ldrh	r3, [r7, #22]
 8001a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a5c:	8b7b      	ldrh	r3, [r7, #26]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	6959      	ldr	r1, [r3, #20]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	891a      	ldrh	r2, [r3, #8]
 8001a70:	8b7b      	ldrh	r3, [r7, #26]
 8001a72:	f003 fc4d 	bl	8005310 <USB_ReadPMA>
 8001a76:	e07c      	b.n	8001b72 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3306      	adds	r3, #6
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	8b7b      	ldrh	r3, [r7, #26]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d306      	bcc.n	8001aba <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	8b7b      	ldrh	r3, [r7, #26]
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	619a      	str	r2, [r3, #24]
 8001ab8:	e002      	b.n	8001ac0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d123      	bne.n	8001b10 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae2:	83fb      	strh	r3, [r7, #30]
 8001ae4:	8bfb      	ldrh	r3, [r7, #30]
 8001ae6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001aea:	83fb      	strh	r3, [r7, #30]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	441a      	add	r2, r3
 8001afa:	8bfb      	ldrh	r3, [r7, #30]
 8001afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11f      	bne.n	8001b5a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b34:	83bb      	strh	r3, [r7, #28]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	441a      	add	r2, r3
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b5a:	8b7b      	ldrh	r3, [r7, #26]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	6959      	ldr	r1, [r3, #20]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	895a      	ldrh	r2, [r3, #10]
 8001b6c:	8b7b      	ldrh	r3, [r7, #26]
 8001b6e:	f003 fbcf 	bl	8005310 <USB_ReadPMA>
    }
  }

  return count;
 8001b72:	8b7b      	ldrh	r3, [r7, #26]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b092      	sub	sp, #72	; 0x48
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	4613      	mov	r3, r2
 8001b88:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8132 	beq.w	8001dfa <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	3302      	adds	r3, #2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bbe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d906      	bls.n	8001bd8 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bd0:	1ad2      	subs	r2, r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	e002      	b.n	8001bde <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d12c      	bne.n	8001c40 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f005 f92c 	bl	8006e4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 822f 	beq.w	800205c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c18:	827b      	strh	r3, [r7, #18]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	441a      	add	r2, r3
 8001c28:	8a7b      	ldrh	r3, [r7, #18]
 8001c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	8013      	strh	r3, [r2, #0]
 8001c3e:	e20d      	b.n	800205c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01f      	beq.n	8001c8a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c64:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	441a      	add	r2, r3
 8001c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	f040 81e3 	bne.w	800205c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c9c:	441a      	add	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ca8:	441a      	add	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d309      	bcc.n	8001cce <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc6:	1ad2      	subs	r2, r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	621a      	str	r2, [r3, #32]
 8001ccc:	e014      	b.n	8001cf8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001cd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ce2:	e009      	b.n	8001cf8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d155      	bne.n	8001dac <HAL_PCD_EP_DB_Transmit+0x230>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4413      	add	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	011a      	lsls	r2, r3, #4
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4413      	add	r3, r2
 8001d22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d112      	bne.n	8001d54 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	e047      	b.n	8001de4 <HAL_PCD_EP_DB_Transmit+0x268>
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	2b3e      	cmp	r3, #62	; 0x3e
 8001d58:	d811      	bhi.n	8001d7e <HAL_PCD_EP_DB_Transmit+0x202>
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	e032      	b.n	8001de4 <HAL_PCD_EP_DB_Transmit+0x268>
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <HAL_PCD_EP_DB_Transmit+0x218>
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	029b      	lsls	r3, r3, #10
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	e01b      	b.n	8001de4 <HAL_PCD_EP_DB_Transmit+0x268>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	785b      	ldrb	r3, [r3, #1]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d117      	bne.n	8001de4 <HAL_PCD_EP_DB_Transmit+0x268>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	623b      	str	r3, [r7, #32]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	4413      	add	r3, r2
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	011a      	lsls	r2, r3, #4
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	6959      	ldr	r1, [r3, #20]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	891a      	ldrh	r2, [r3, #8]
 8001df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f003 fa48 	bl	8005288 <USB_WritePMA>
 8001df8:	e130      	b.n	800205c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3306      	adds	r3, #6
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e22:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d306      	bcc.n	8001e3c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e34:	1ad2      	subs	r2, r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	619a      	str	r2, [r3, #24]
 8001e3a:	e002      	b.n	8001e42 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d12c      	bne.n	8001ea4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f004 fffa 	bl	8006e4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 80fd 	bne.w	800205c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	441a      	add	r2, r3
 8001e8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	8013      	strh	r3, [r2, #0]
 8001ea2:	e0db      	b.n	800205c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11f      	bne.n	8001eee <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	441a      	add	r2, r3
 8001ed8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	f040 80b1 	bne.w	800205c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f00:	441a      	add	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f0c:	441a      	add	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d309      	bcc.n	8001f32 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2a:	1ad2      	subs	r2, r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	621a      	str	r2, [r3, #32]
 8001f30:	e014      	b.n	8001f5c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8001f3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f46:	e009      	b.n	8001f5c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d155      	bne.n	8002016 <HAL_PCD_EP_DB_Transmit+0x49a>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7e:	4413      	add	r3, r2
 8001f80:	647b      	str	r3, [r7, #68]	; 0x44
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	011a      	lsls	r2, r3, #4
 8001f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d112      	bne.n	8001fbe <HAL_PCD_EP_DB_Transmit+0x442>
 8001f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa6:	801a      	strh	r2, [r3, #0]
 8001fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	e044      	b.n	8002048 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8001fc2:	d811      	bhi.n	8001fe8 <HAL_PCD_EP_DB_Transmit+0x46c>
 8001fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_PCD_EP_DB_Transmit+0x45e>
 8001fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	801a      	strh	r2, [r3, #0]
 8001fe6:	e02f      	b.n	8002048 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <HAL_PCD_EP_DB_Transmit+0x482>
 8001ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002000:	b29b      	uxth	r3, r3
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	b29b      	uxth	r3, r3
 8002006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800200a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800200e:	b29a      	uxth	r2, r3
 8002010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	e018      	b.n	8002048 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	785b      	ldrb	r3, [r3, #1]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d114      	bne.n	8002048 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002026:	b29b      	uxth	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202c:	4413      	add	r3, r2
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	011a      	lsls	r2, r3, #4
 8002036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002038:	4413      	add	r3, r2
 800203a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
 8002040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002042:	b29a      	uxth	r2, r3
 8002044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002046:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	6959      	ldr	r1, [r3, #20]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	895a      	ldrh	r2, [r3, #10]
 8002054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002056:	b29b      	uxth	r3, r3
 8002058:	f003 f916 	bl	8005288 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002076:	823b      	strh	r3, [r7, #16]
 8002078:	8a3b      	ldrh	r3, [r7, #16]
 800207a:	f083 0310 	eor.w	r3, r3, #16
 800207e:	823b      	strh	r3, [r7, #16]
 8002080:	8a3b      	ldrh	r3, [r7, #16]
 8002082:	f083 0320 	eor.w	r3, r3, #32
 8002086:	823b      	strh	r3, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	441a      	add	r2, r3
 8002096:	8a3b      	ldrh	r3, [r7, #16]
 8002098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800209c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3748      	adds	r7, #72	; 0x48
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	817b      	strh	r3, [r7, #10]
 80020c4:	4613      	mov	r3, r2
 80020c6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00b      	beq.n	80020ec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	897b      	ldrh	r3, [r7, #10]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e009      	b.n	8002100 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020ec:	897a      	ldrh	r2, [r7, #10]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002100:	893b      	ldrh	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d107      	bne.n	8002116 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	b29a      	uxth	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	80da      	strh	r2, [r3, #6]
 8002114:	e00b      	b.n	800212e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2201      	movs	r2, #1
 800211a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	b29a      	uxth	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0c1b      	lsrs	r3, r3, #16
 8002128:	b29a      	uxth	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
	...

0800213c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e26c      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8087 	beq.w	800226a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800215c:	4b92      	ldr	r3, [pc, #584]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b04      	cmp	r3, #4
 8002166:	d00c      	beq.n	8002182 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002168:	4b8f      	ldr	r3, [pc, #572]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b08      	cmp	r3, #8
 8002172:	d112      	bne.n	800219a <HAL_RCC_OscConfig+0x5e>
 8002174:	4b8c      	ldr	r3, [pc, #560]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d10b      	bne.n	800219a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002182:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d06c      	beq.n	8002268 <HAL_RCC_OscConfig+0x12c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d168      	bne.n	8002268 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e246      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x76>
 80021a4:	4b80      	ldr	r3, [pc, #512]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a7f      	ldr	r2, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e02e      	b.n	8002210 <HAL_RCC_OscConfig+0xd4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x98>
 80021ba:	4b7b      	ldr	r3, [pc, #492]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a7a      	ldr	r2, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b78      	ldr	r3, [pc, #480]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a77      	ldr	r2, [pc, #476]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xd4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0xbc>
 80021de:	4b72      	ldr	r3, [pc, #456]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a71      	ldr	r2, [pc, #452]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b6f      	ldr	r3, [pc, #444]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6e      	ldr	r2, [pc, #440]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xd4>
 80021f8:	4b6b      	ldr	r3, [pc, #428]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6a      	ldr	r2, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a67      	ldr	r2, [pc, #412]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe f9c8 	bl	80005ac <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe f9c4 	bl	80005ac <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1fa      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b5d      	ldr	r3, [pc, #372]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xe4>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe f9b4 	bl	80005ac <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe f9b0 	bl	80005ac <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1e6      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x10c>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002276:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002282:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x18c>
 800228e:	4b46      	ldr	r3, [pc, #280]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x176>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1ba      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4939      	ldr	r1, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b36      	ldr	r3, [pc, #216]	; (80023ac <HAL_RCC_OscConfig+0x270>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe f969 	bl	80005ac <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7fe f965 	bl	80005ac <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e19b      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4927      	ldr	r1, [pc, #156]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x270>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe f948 	bl	80005ac <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe f944 	bl	80005ac <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e17a      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d03a      	beq.n	80023c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d019      	beq.n	8002386 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <HAL_RCC_OscConfig+0x274>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe f928 	bl	80005ac <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe f924 	bl	80005ac <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e15a      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800237e:	2001      	movs	r0, #1
 8002380:	f000 fb0a 	bl	8002998 <RCC_Delay>
 8002384:	e01c      	b.n	80023c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_OscConfig+0x274>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f7fe f90e 	bl	80005ac <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002392:	e00f      	b.n	80023b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7fe f90a 	bl	80005ac <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d908      	bls.n	80023b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e140      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	42420000 	.word	0x42420000
 80023b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	4b9e      	ldr	r3, [pc, #632]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e9      	bne.n	8002394 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a6 	beq.w	800251a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	4b97      	ldr	r3, [pc, #604]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b94      	ldr	r3, [pc, #592]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4a93      	ldr	r2, [pc, #588]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	61d3      	str	r3, [r2, #28]
 80023ea:	4b91      	ldr	r3, [pc, #580]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b8e      	ldr	r3, [pc, #568]	; (8002634 <HAL_RCC_OscConfig+0x4f8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002406:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a8a      	ldr	r2, [pc, #552]	; (8002634 <HAL_RCC_OscConfig+0x4f8>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002412:	f7fe f8cb 	bl	80005ac <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241a:	f7fe f8c7 	bl	80005ac <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b64      	cmp	r3, #100	; 0x64
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0fd      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	4b81      	ldr	r3, [pc, #516]	; (8002634 <HAL_RCC_OscConfig+0x4f8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x312>
 8002440:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a7a      	ldr	r2, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e02d      	b.n	80024aa <HAL_RCC_OscConfig+0x36e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x334>
 8002456:	4b76      	ldr	r3, [pc, #472]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a75      	ldr	r2, [pc, #468]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4b73      	ldr	r3, [pc, #460]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a72      	ldr	r2, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	e01c      	b.n	80024aa <HAL_RCC_OscConfig+0x36e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d10c      	bne.n	8002492 <HAL_RCC_OscConfig+0x356>
 8002478:	4b6d      	ldr	r3, [pc, #436]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a6c      	ldr	r2, [pc, #432]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a69      	ldr	r2, [pc, #420]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	e00b      	b.n	80024aa <HAL_RCC_OscConfig+0x36e>
 8002492:	4b67      	ldr	r3, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a66      	ldr	r2, [pc, #408]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6213      	str	r3, [r2, #32]
 800249e:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a63      	ldr	r2, [pc, #396]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d015      	beq.n	80024de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7fe f87b 	bl	80005ac <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe f877 	bl	80005ac <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e0ab      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	4b57      	ldr	r3, [pc, #348]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ee      	beq.n	80024ba <HAL_RCC_OscConfig+0x37e>
 80024dc:	e014      	b.n	8002508 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fe f865 	bl	80005ac <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe f861 	bl	80005ac <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e095      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ee      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002518:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8081 	beq.w	8002626 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002524:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d061      	beq.n	80025f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d146      	bne.n	80025c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <HAL_RCC_OscConfig+0x4fc>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe f835 	bl	80005ac <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe f831 	bl	80005ac <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e067      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256c:	d108      	bne.n	8002580 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800256e:	4b30      	ldr	r3, [pc, #192]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	492d      	ldr	r1, [pc, #180]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a19      	ldr	r1, [r3, #32]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	430b      	orrs	r3, r1
 8002592:	4927      	ldr	r1, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_OscConfig+0x4fc>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe f805 	bl	80005ac <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe f801 	bl	80005ac <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e037      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x46a>
 80025c4:	e02f      	b.n	8002626 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_RCC_OscConfig+0x4fc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fd ffee 	bl	80005ac <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fd ffea 	bl	80005ac <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e020      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x498>
 80025f2:	e018      	b.n	8002626 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e013      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
 8002638:	42420060 	.word	0x42420060

0800263c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0d0      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d910      	bls.n	8002680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4965      	ldr	r1, [pc, #404]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b63      	ldr	r3, [pc, #396]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0b8      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002698:	4b59      	ldr	r3, [pc, #356]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a58      	ldr	r2, [pc, #352]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b0:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026bc:	4b50      	ldr	r3, [pc, #320]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	494d      	ldr	r1, [pc, #308]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d040      	beq.n	800275c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d115      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e07f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4b41      	ldr	r3, [pc, #260]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e073      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e06b      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271a:	4b39      	ldr	r3, [pc, #228]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f023 0203 	bic.w	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4936      	ldr	r1, [pc, #216]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800272c:	f7fd ff3e 	bl	80005ac <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	e00a      	b.n	800274a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002734:	f7fd ff3a 	bl	80005ac <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e053      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 020c 	and.w	r2, r3, #12
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	429a      	cmp	r2, r3
 800275a:	d1eb      	bne.n	8002734 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d210      	bcs.n	800278c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0207 	bic.w	r2, r3, #7
 8002772:	4922      	ldr	r1, [pc, #136]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e032      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4916      	ldr	r1, [pc, #88]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ca:	f000 f821 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 80027ce:	4601      	mov	r1, r0
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_RCC_ClockConfig+0x1c8>)
 80027dc:	5cd3      	ldrb	r3, [r2, r3]
 80027de:	fa21 f303 	lsr.w	r3, r1, r3
 80027e2:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1cc>)
 80027e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1d0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fdf8 	bl	80003e0 <HAL_InitTick>

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40022000 	.word	0x40022000
 8002800:	40021000 	.word	0x40021000
 8002804:	080073c4 	.word	0x080073c4
 8002808:	20000000 	.word	0x20000000
 800280c:	20000004 	.word	0x20000004

08002810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	b490      	push	{r4, r7}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002818:	1d3c      	adds	r4, r7, #4
 800281a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800281c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x40>
 800284a:	2b08      	cmp	r3, #8
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x46>
 800284e:	e02d      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002852:	623b      	str	r3, [r7, #32]
      break;
 8002854:	e02d      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	0c9b      	lsrs	r3, r3, #18
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002862:	4413      	add	r3, r2
 8002864:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002868:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	0c5b      	lsrs	r3, r3, #17
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002882:	4413      	add	r3, r2
 8002884:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002888:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800288e:	fb02 f203 	mul.w	r2, r2, r3
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
 800289a:	e004      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	623b      	str	r3, [r7, #32]
      break;
 80028aa:	e002      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80028ae:	623b      	str	r3, [r7, #32]
      break;
 80028b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b2:	6a3b      	ldr	r3, [r7, #32]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3728      	adds	r7, #40	; 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc90      	pop	{r4, r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	08007368 	.word	0x08007368
 80028c4:	08007378 	.word	0x08007378
 80028c8:	40021000 	.word	0x40021000
 80028cc:	007a1200 	.word	0x007a1200
 80028d0:	003d0900 	.word	0x003d0900

080028d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d8:	4b02      	ldr	r3, [pc, #8]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000000 	.word	0x20000000

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028ec:	f7ff fff2 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 80028f0:	4601      	mov	r1, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4a03      	ldr	r2, [pc, #12]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	080073d4 	.word	0x080073d4

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002914:	f7ff ffde 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 8002918:	4601      	mov	r1, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0adb      	lsrs	r3, r3, #11
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4a03      	ldr	r2, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	080073d4 	.word	0x080073d4

08002938 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	220f      	movs	r2, #15
 8002946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCC_GetClockConfig+0x58>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_RCC_GetClockConfig+0x58>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_GetClockConfig+0x58>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_RCC_GetClockConfig+0x58>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_GetClockConfig+0x5c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40021000 	.word	0x40021000
 8002994:	40022000 	.word	0x40022000

08002998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <RCC_Delay+0x34>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <RCC_Delay+0x38>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b4:	bf00      	nop
  }
  while (Delay --);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <RCC_Delay+0x1c>
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000000 	.word	0x20000000
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d07d      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f4:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10d      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	61d3      	str	r3, [r2, #28]
 8002a0c:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d118      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a28:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a42      	ldr	r2, [pc, #264]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a34:	f7fd fdba 	bl	80005ac <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	e008      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3c:	f7fd fdb6 	bl	80005ac <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e06d      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02e      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d027      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a8e:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d014      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fd fd85 	bl	80005ac <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fd fd81 	bl	80005ac <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e036      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ee      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4917      	ldr	r1, [pc, #92]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	490b      	ldr	r1, [pc, #44]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	42420440 	.word	0x42420440

08002b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e041      	b.n	8002bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f839 	bl	8002bde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	f000 f9b4 	bl	8002eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d001      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e03a      	b.n	8002c7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_TIM_Base_Start_IT+0x98>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00e      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x58>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c32:	d009      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x58>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <HAL_TIM_Base_Start_IT+0x9c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x58>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d111      	bne.n	8002c6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d010      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6a:	e007      	b.n	8002c7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800

08002c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0202 	mvn.w	r2, #2
 8002cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8ed 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8e0 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8ef 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0204 	mvn.w	r2, #4
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8c3 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8b6 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f8c5 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d122      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d11b      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0208 	mvn.w	r2, #8
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f899 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f88c 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f89b 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d122      	bne.n	8002dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d11b      	bne.n	8002dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0210 	mvn.w	r2, #16
 8002dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f86f 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f862 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f871 	bl	8002ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0201 	mvn.w	r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fa50 	bl	80002b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8bf 	bl	8002fc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f835 	bl	8002eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0220 	mvn.w	r2, #32
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f88a 	bl	8002fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <TIM_Base_SetConfig+0xb8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0x30>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0x30>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <TIM_Base_SetConfig+0xbc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0x30>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a25      	ldr	r2, [pc, #148]	; (8002fac <TIM_Base_SetConfig+0xc0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <TIM_Base_SetConfig+0xb8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00b      	beq.n	8002f4e <TIM_Base_SetConfig+0x62>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d007      	beq.n	8002f4e <TIM_Base_SetConfig+0x62>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <TIM_Base_SetConfig+0xbc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <TIM_Base_SetConfig+0x62>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a18      	ldr	r2, [pc, #96]	; (8002fac <TIM_Base_SetConfig+0xc0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d108      	bne.n	8002f60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <TIM_Base_SetConfig+0xb8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d103      	bne.n	8002f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	615a      	str	r2, [r3, #20]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800

08002fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e033      	b.n	800304e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd f9a4 	bl	8000348 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f825 	bl	8003058 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800301c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800302c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800303c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 020c 	bic.w	r2, r2, #12
 8003072:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003082:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800308c:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030a2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030ba:	f023 030c 	bic.w	r3, r3, #12
 80030be:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030ec:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a53      	ldr	r2, [pc, #332]	; (8003240 <USART_SetConfig+0x1e8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d14f      	bne.n	8003198 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030f8:	f7ff fc0a 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 80030fc:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009a      	lsls	r2, r3, #2
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	4a4b      	ldr	r2, [pc, #300]	; (8003244 <USART_SetConfig+0x1ec>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	0119      	lsls	r1, r3, #4
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009a      	lsls	r2, r3, #2
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	fbb2 f2f3 	udiv	r2, r2, r3
 8003134:	4b43      	ldr	r3, [pc, #268]	; (8003244 <USART_SetConfig+0x1ec>)
 8003136:	fba3 0302 	umull	r0, r3, r3, r2
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2064      	movs	r0, #100	; 0x64
 800313e:	fb00 f303 	mul.w	r3, r0, r3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	3332      	adds	r3, #50	; 0x32
 8003148:	4a3e      	ldr	r2, [pc, #248]	; (8003244 <USART_SetConfig+0x1ec>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003156:	4419      	add	r1, r3
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	fbb2 f2f3 	udiv	r2, r2, r3
 800316e:	4b35      	ldr	r3, [pc, #212]	; (8003244 <USART_SetConfig+0x1ec>)
 8003170:	fba3 0302 	umull	r0, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	2064      	movs	r0, #100	; 0x64
 8003178:	fb00 f303 	mul.w	r3, r0, r3
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	3332      	adds	r3, #50	; 0x32
 8003182:	4a30      	ldr	r2, [pc, #192]	; (8003244 <USART_SetConfig+0x1ec>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	440a      	add	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003196:	e04e      	b.n	8003236 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003198:	f7ff fba6 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 800319c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009a      	lsls	r2, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	4a23      	ldr	r2, [pc, #140]	; (8003244 <USART_SetConfig+0x1ec>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	0119      	lsls	r1, r3, #4
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009a      	lsls	r2, r3, #2
 80031c8:	441a      	add	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <USART_SetConfig+0x1ec>)
 80031d6:	fba3 0302 	umull	r0, r3, r3, r2
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2064      	movs	r0, #100	; 0x64
 80031de:	fb00 f303 	mul.w	r3, r0, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	3332      	adds	r3, #50	; 0x32
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <USART_SetConfig+0x1ec>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80031f6:	4419      	add	r1, r3
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009a      	lsls	r2, r3, #2
 8003202:	441a      	add	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	fbb2 f2f3 	udiv	r2, r2, r3
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <USART_SetConfig+0x1ec>)
 8003210:	fba3 0302 	umull	r0, r3, r3, r2
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	2064      	movs	r0, #100	; 0x64
 8003218:	fb00 f303 	mul.w	r3, r0, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	3332      	adds	r3, #50	; 0x32
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <USART_SetConfig+0x1ec>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	440a      	add	r2, r1
 8003234:	609a      	str	r2, [r3, #8]
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40013800 	.word	0x40013800
 8003244:	51eb851f 	.word	0x51eb851f

08003248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003248:	b084      	sub	sp, #16
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	f107 0014 	add.w	r0, r7, #20
 8003256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	b004      	add	sp, #16
 8003266:	4770      	bx	lr

08003268 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003278:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800327c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800329c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80032a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4013      	ands	r3, r2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032e0:	b084      	sub	sp, #16
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	f107 0014 	add.w	r0, r7, #20
 80032ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	b004      	add	sp, #16
 800331e:	4770      	bx	lr

08003320 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003320:	b480      	push	{r7}
 8003322:	b09b      	sub	sp, #108	; 0x6c
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	78db      	ldrb	r3, [r3, #3]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d81f      	bhi.n	8003392 <USB_ActivateEndpoint+0x72>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <USB_ActivateEndpoint+0x38>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003369 	.word	0x08003369
 800335c:	08003385 	.word	0x08003385
 8003360:	0800339b 	.word	0x0800339b
 8003364:	08003377 	.word	0x08003377
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003368:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800336c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003370:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003374:	e012      	b.n	800339c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003376:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800337a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800337e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003382:	e00b      	b.n	800339c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003384:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800338c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003390:	e004      	b.n	800339c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003398:	e000      	b.n	800339c <USB_ActivateEndpoint+0x7c>
      break;
 800339a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80033aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	441a      	add	r2, r3
 80033ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80033f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003400:	b29b      	uxth	r3, r3
 8003402:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	7b1b      	ldrb	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 8149 	bne.w	80036a0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	785b      	ldrb	r3, [r3, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8084 	beq.w	8003520 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4413      	add	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	011a      	lsls	r2, r3, #4
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	88db      	ldrh	r3, [r3, #6]
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	b29b      	uxth	r3, r3
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	81fb      	strh	r3, [r7, #14]
 800345a:	89fb      	ldrh	r3, [r7, #14]
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <USB_ActivateEndpoint+0x17c>
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347a:	81bb      	strh	r3, [r7, #12]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	441a      	add	r2, r3
 8003486:	89bb      	ldrh	r3, [r7, #12]
 8003488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800348c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003494:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003498:	b29b      	uxth	r3, r3
 800349a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	78db      	ldrb	r3, [r3, #3]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d020      	beq.n	80034e6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ba:	813b      	strh	r3, [r7, #8]
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	f083 0320 	eor.w	r3, r3, #32
 80034c2:	813b      	strh	r3, [r7, #8]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	893b      	ldrh	r3, [r7, #8]
 80034d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
 80034e4:	e27f      	b.n	80039e6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fc:	817b      	strh	r3, [r7, #10]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	441a      	add	r2, r3
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800350e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351a:	b29b      	uxth	r3, r3
 800351c:	8013      	strh	r3, [r2, #0]
 800351e:	e262      	b.n	80039e6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800352a:	b29b      	uxth	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	4413      	add	r3, r2
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	011a      	lsls	r2, r3, #4
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	4413      	add	r3, r2
 800353e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	88db      	ldrh	r3, [r3, #6]
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800355e:	b29b      	uxth	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	4413      	add	r3, r2
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	011a      	lsls	r2, r3, #4
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	4413      	add	r3, r2
 8003572:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d112      	bne.n	80035a6 <USB_ActivateEndpoint+0x286>
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800358a:	b29a      	uxth	r2, r3
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800359a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359e:	b29a      	uxth	r2, r3
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	801a      	strh	r2, [r3, #0]
 80035a4:	e02f      	b.n	8003606 <USB_ActivateEndpoint+0x2e6>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b3e      	cmp	r3, #62	; 0x3e
 80035ac:	d813      	bhi.n	80035d6 <USB_ActivateEndpoint+0x2b6>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	663b      	str	r3, [r7, #96]	; 0x60
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <USB_ActivateEndpoint+0x2a8>
 80035c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035c4:	3301      	adds	r3, #1
 80035c6:	663b      	str	r3, [r7, #96]	; 0x60
 80035c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	029b      	lsls	r3, r3, #10
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	e017      	b.n	8003606 <USB_ActivateEndpoint+0x2e6>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	663b      	str	r3, [r7, #96]	; 0x60
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <USB_ActivateEndpoint+0x2d0>
 80035ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ec:	3b01      	subs	r3, #1
 80035ee:	663b      	str	r3, [r7, #96]	; 0x60
 80035f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	029b      	lsls	r3, r3, #10
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003600:	b29a      	uxth	r2, r3
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	83fb      	strh	r3, [r7, #30]
 8003614:	8bfb      	ldrh	r3, [r7, #30]
 8003616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01b      	beq.n	8003656 <USB_ActivateEndpoint+0x336>
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003634:	83bb      	strh	r3, [r7, #28]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	441a      	add	r2, r3
 8003640:	8bbb      	ldrh	r3, [r7, #28]
 8003642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800364e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003652:	b29b      	uxth	r3, r3
 8003654:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366c:	837b      	strh	r3, [r7, #26]
 800366e:	8b7b      	ldrh	r3, [r7, #26]
 8003670:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003674:	837b      	strh	r3, [r7, #26]
 8003676:	8b7b      	ldrh	r3, [r7, #26]
 8003678:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800367c:	837b      	strh	r3, [r7, #26]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	441a      	add	r2, r3
 8003688:	8b7b      	ldrh	r3, [r7, #26]
 800368a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369a:	b29b      	uxth	r3, r3
 800369c:	8013      	strh	r3, [r2, #0]
 800369e:	e1a2      	b.n	80039e6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	441a      	add	r2, r3
 80036c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80036c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80036d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d8:	b29b      	uxth	r3, r3
 80036da:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65bb      	str	r3, [r7, #88]	; 0x58
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ec:	4413      	add	r3, r2
 80036ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	011a      	lsls	r2, r3, #4
 80036f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	891b      	ldrh	r3, [r3, #8]
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	653b      	str	r3, [r7, #80]	; 0x50
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003720:	4413      	add	r3, r2
 8003722:	653b      	str	r3, [r7, #80]	; 0x50
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	011a      	lsls	r2, r3, #4
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	4413      	add	r3, r2
 800372e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	895b      	ldrh	r3, [r3, #10]
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	b29b      	uxth	r3, r3
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003742:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f040 8091 	bne.w	8003870 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800375c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800375e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01b      	beq.n	800379e <USB_ActivateEndpoint+0x47e>
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	441a      	add	r2, r3
 8003788:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800378a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800378e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379a:	b29b      	uxth	r3, r3
 800379c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80037ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01b      	beq.n	80037ee <USB_ActivateEndpoint+0x4ce>
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	441a      	add	r2, r3
 80037d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003804:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003806:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003808:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800380c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800380e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003810:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003814:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	441a      	add	r2, r3
 8003820:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800382a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003832:	b29b      	uxth	r3, r3
 8003834:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	b29b      	uxth	r3, r3
 8003844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384c:	867b      	strh	r3, [r7, #50]	; 0x32
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	441a      	add	r2, r3
 8003858:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800385a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800385e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386a:	b29b      	uxth	r3, r3
 800386c:	8013      	strh	r3, [r2, #0]
 800386e:	e0ba      	b.n	80039e6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003880:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01d      	beq.n	80038c8 <USB_ActivateEndpoint+0x5a8>
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80038d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01d      	beq.n	8003920 <USB_ActivateEndpoint+0x600>
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	441a      	add	r2, r3
 8003908:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800390c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800391c:	b29b      	uxth	r3, r3
 800391e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	78db      	ldrb	r3, [r3, #3]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d024      	beq.n	8003972 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003946:	f083 0320 	eor.w	r3, r3, #32
 800394a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800395c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396c:	b29b      	uxth	r3, r3
 800396e:	8013      	strh	r3, [r2, #0]
 8003970:	e01d      	b.n	80039ae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003988:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800399a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800399e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	441a      	add	r2, r3
 80039d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80039d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80039e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	376c      	adds	r7, #108	; 0x6c
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b08d      	sub	sp, #52	; 0x34
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	7b1b      	ldrb	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 808e 	bne.w	8003b24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d044      	beq.n	8003a9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	81bb      	strh	r3, [r7, #12]
 8003a1e:	89bb      	ldrh	r3, [r7, #12]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01b      	beq.n	8003a60 <USB_DeactivateEndpoint+0x6c>
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	817b      	strh	r3, [r7, #10]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a76:	813b      	strh	r3, [r7, #8]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	893b      	ldrh	r3, [r7, #8]
 8003a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	8013      	strh	r3, [r2, #0]
 8003a98:	e192      	b.n	8003dc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	827b      	strh	r3, [r7, #18]
 8003aa8:	8a7b      	ldrh	r3, [r7, #18]
 8003aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01b      	beq.n	8003aea <USB_DeactivateEndpoint+0xf6>
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	823b      	strh	r3, [r7, #16]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	441a      	add	r2, r3
 8003ad4:	8a3b      	ldrh	r3, [r7, #16]
 8003ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b00:	81fb      	strh	r3, [r7, #14]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	89fb      	ldrh	r3, [r7, #14]
 8003b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8013      	strh	r3, [r2, #0]
 8003b22:	e14d      	b.n	8003dc0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 80a5 	bne.w	8003c78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	843b      	strh	r3, [r7, #32]
 8003b3c:	8c3b      	ldrh	r3, [r7, #32]
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01b      	beq.n	8003b7e <USB_DeactivateEndpoint+0x18a>
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5c:	83fb      	strh	r3, [r7, #30]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	8bfb      	ldrh	r3, [r7, #30]
 8003b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	83bb      	strh	r3, [r7, #28]
 8003b8c:	8bbb      	ldrh	r3, [r7, #28]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01b      	beq.n	8003bce <USB_DeactivateEndpoint+0x1da>
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	837b      	strh	r3, [r7, #26]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	8b7b      	ldrh	r3, [r7, #26]
 8003bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be4:	833b      	strh	r3, [r7, #24]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	441a      	add	r2, r3
 8003bf0:	8b3b      	ldrh	r3, [r7, #24]
 8003bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1c:	82fb      	strh	r3, [r7, #22]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	8afb      	ldrh	r3, [r7, #22]
 8003c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c54:	82bb      	strh	r3, [r7, #20]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	8abb      	ldrh	r3, [r7, #20]
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
 8003c76:	e0a3      	b.n	8003dc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003c86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01b      	beq.n	8003cc8 <USB_DeactivateEndpoint+0x2d4>
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	441a      	add	r2, r3
 8003cb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003cd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <USB_DeactivateEndpoint+0x324>
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	441a      	add	r2, r3
 8003d3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3734      	adds	r7, #52	; 0x34
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b0c4      	sub	sp, #272	; 0x110
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	6018      	str	r0, [r3, #0]
 8003dd6:	463b      	mov	r3, r7
 8003dd8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dda:	463b      	mov	r3, r7
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 8557 	bne.w	8004894 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003de6:	463b      	mov	r3, r7
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	463b      	mov	r3, r7
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d905      	bls.n	8003e02 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003df6:	463b      	mov	r3, r7
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003e00:	e004      	b.n	8003e0c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003e02:	463b      	mov	r3, r7
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	7b1b      	ldrb	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d12c      	bne.n	8003e70 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003e16:	463b      	mov	r3, r7
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6959      	ldr	r1, [r3, #20]
 8003e1c:	463b      	mov	r3, r7
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	88da      	ldrh	r2, [r3, #6]
 8003e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	1d38      	adds	r0, r7, #4
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	f001 fa2c 	bl	8005288 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4413      	add	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	463b      	mov	r3, r7
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	011a      	lsls	r2, r3, #4
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	4413      	add	r3, r2
 8003e54:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	801a      	strh	r2, [r3, #0]
 8003e6c:	f000 bcdd 	b.w	800482a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003e70:	463b      	mov	r3, r7
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	78db      	ldrb	r3, [r3, #3]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	f040 8347 	bne.w	800450a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	463b      	mov	r3, r7
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	f240 82eb 	bls.w	8004464 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	463b      	mov	r3, r7
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003edc:	1ad2      	subs	r2, r2, r3
 8003ede:	463b      	mov	r3, r7
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	463b      	mov	r3, r7
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8159 	beq.w	80041b2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
 8003f06:	463b      	mov	r3, r7
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d164      	bne.n	8003fda <USB_EPStartXfer+0x20e>
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	4413      	add	r3, r2
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f28:	463b      	mov	r3, r7
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	011a      	lsls	r2, r3, #4
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	4413      	add	r3, r2
 8003f34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d112      	bne.n	8003f68 <USB_EPStartXfer+0x19c>
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	801a      	strh	r2, [r3, #0]
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	801a      	strh	r2, [r3, #0]
 8003f66:	e054      	b.n	8004012 <USB_EPStartXfer+0x246>
 8003f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f6c:	2b3e      	cmp	r3, #62	; 0x3e
 8003f6e:	d817      	bhi.n	8003fa0 <USB_EPStartXfer+0x1d4>
 8003f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <USB_EPStartXfer+0x1c4>
 8003f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	029b      	lsls	r3, r3, #10
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	801a      	strh	r2, [r3, #0]
 8003f9e:	e038      	b.n	8004012 <USB_EPStartXfer+0x246>
 8003fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <USB_EPStartXfer+0x1f4>
 8003fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	029b      	lsls	r3, r3, #10
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e01b      	b.n	8004012 <USB_EPStartXfer+0x246>
 8003fda:	463b      	mov	r3, r7
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d116      	bne.n	8004012 <USB_EPStartXfer+0x246>
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff2:	4413      	add	r3, r2
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff6:	463b      	mov	r3, r7
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	011a      	lsls	r2, r3, #4
 8003ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004000:	4413      	add	r3, r2
 8004002:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
 8004008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400c:	b29a      	uxth	r2, r3
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004012:	463b      	mov	r3, r7
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	895b      	ldrh	r3, [r3, #10]
 8004018:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800401c:	463b      	mov	r3, r7
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6959      	ldr	r1, [r3, #20]
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004026:	b29b      	uxth	r3, r3
 8004028:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800402c:	1d38      	adds	r0, r7, #4
 800402e:	6800      	ldr	r0, [r0, #0]
 8004030:	f001 f92a 	bl	8005288 <USB_WritePMA>
            ep->xfer_buff += len;
 8004034:	463b      	mov	r3, r7
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403e:	441a      	add	r2, r3
 8004040:	463b      	mov	r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004046:	463b      	mov	r3, r7
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	463b      	mov	r3, r7
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	429a      	cmp	r2, r3
 8004054:	d909      	bls.n	800406a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004056:	463b      	mov	r3, r7
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004060:	1ad2      	subs	r2, r2, r3
 8004062:	463b      	mov	r3, r7
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	621a      	str	r2, [r3, #32]
 8004068:	e008      	b.n	800407c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800406a:	463b      	mov	r3, r7
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004074:	463b      	mov	r3, r7
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2200      	movs	r2, #0
 800407a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800407c:	463b      	mov	r3, r7
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	785b      	ldrb	r3, [r3, #1]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d164      	bne.n	8004150 <USB_EPStartXfer+0x384>
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004094:	b29b      	uxth	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	463b      	mov	r3, r7
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	011a      	lsls	r2, r3, #4
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d112      	bne.n	80040de <USB_EPStartXfer+0x312>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	801a      	strh	r2, [r3, #0]
 80040dc:	e057      	b.n	800418e <USB_EPStartXfer+0x3c2>
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e2:	2b3e      	cmp	r3, #62	; 0x3e
 80040e4:	d817      	bhi.n	8004116 <USB_EPStartXfer+0x34a>
 80040e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <USB_EPStartXfer+0x33a>
 80040fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004100:	3301      	adds	r3, #1
 8004102:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004106:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800410a:	b29b      	uxth	r3, r3
 800410c:	029b      	lsls	r3, r3, #10
 800410e:	b29a      	uxth	r2, r3
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	e03b      	b.n	800418e <USB_EPStartXfer+0x3c2>
 8004116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2b00      	cmp	r3, #0
 800412a:	d104      	bne.n	8004136 <USB_EPStartXfer+0x36a>
 800412c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004130:	3b01      	subs	r3, #1
 8004132:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004136:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800413a:	b29b      	uxth	r3, r3
 800413c:	029b      	lsls	r3, r3, #10
 800413e:	b29b      	uxth	r3, r3
 8004140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004148:	b29a      	uxth	r2, r3
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	e01e      	b.n	800418e <USB_EPStartXfer+0x3c2>
 8004150:	463b      	mov	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d119      	bne.n	800418e <USB_EPStartXfer+0x3c2>
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004168:	b29b      	uxth	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	4413      	add	r3, r2
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
 8004172:	463b      	mov	r3, r7
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	011a      	lsls	r2, r3, #4
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	4413      	add	r3, r2
 800417e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004188:	b29a      	uxth	r2, r3
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800418e:	463b      	mov	r3, r7
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	891b      	ldrh	r3, [r3, #8]
 8004194:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004198:	463b      	mov	r3, r7
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6959      	ldr	r1, [r3, #20]
 800419e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80041a8:	1d38      	adds	r0, r7, #4
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	f001 f86c 	bl	8005288 <USB_WritePMA>
 80041b0:	e33b      	b.n	800482a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041b2:	463b      	mov	r3, r7
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d164      	bne.n	8004286 <USB_EPStartXfer+0x4ba>
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	4413      	add	r3, r2
 80041d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041d4:	463b      	mov	r3, r7
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	011a      	lsls	r2, r3, #4
 80041dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041de:	4413      	add	r3, r2
 80041e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d112      	bne.n	8004214 <USB_EPStartXfer+0x448>
 80041ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420c:	b29a      	uxth	r2, r3
 800420e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e057      	b.n	80042c4 <USB_EPStartXfer+0x4f8>
 8004214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004218:	2b3e      	cmp	r3, #62	; 0x3e
 800421a:	d817      	bhi.n	800424c <USB_EPStartXfer+0x480>
 800421c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <USB_EPStartXfer+0x470>
 8004232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004236:	3301      	adds	r3, #1
 8004238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800423c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004240:	b29b      	uxth	r3, r3
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	b29a      	uxth	r2, r3
 8004246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	e03b      	b.n	80042c4 <USB_EPStartXfer+0x4f8>
 800424c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <USB_EPStartXfer+0x4a0>
 8004262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004266:	3b01      	subs	r3, #1
 8004268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800426c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004270:	b29b      	uxth	r3, r3
 8004272:	029b      	lsls	r3, r3, #10
 8004274:	b29b      	uxth	r3, r3
 8004276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800427e:	b29a      	uxth	r2, r3
 8004280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004282:	801a      	strh	r2, [r3, #0]
 8004284:	e01e      	b.n	80042c4 <USB_EPStartXfer+0x4f8>
 8004286:	463b      	mov	r3, r7
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d119      	bne.n	80042c4 <USB_EPStartXfer+0x4f8>
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	657b      	str	r3, [r7, #84]	; 0x54
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a4:	4413      	add	r3, r2
 80042a6:	657b      	str	r3, [r7, #84]	; 0x54
 80042a8:	463b      	mov	r3, r7
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	011a      	lsls	r2, r3, #4
 80042b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b2:	4413      	add	r3, r2
 80042b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042b8:	653b      	str	r3, [r7, #80]	; 0x50
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042be:	b29a      	uxth	r2, r3
 80042c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80042c4:	463b      	mov	r3, r7
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	891b      	ldrh	r3, [r3, #8]
 80042ca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042ce:	463b      	mov	r3, r7
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6959      	ldr	r1, [r3, #20]
 80042d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80042de:	1d38      	adds	r0, r7, #4
 80042e0:	6800      	ldr	r0, [r0, #0]
 80042e2:	f000 ffd1 	bl	8005288 <USB_WritePMA>
            ep->xfer_buff += len;
 80042e6:	463b      	mov	r3, r7
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f0:	441a      	add	r2, r3
 80042f2:	463b      	mov	r3, r7
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80042f8:	463b      	mov	r3, r7
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	463b      	mov	r3, r7
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	429a      	cmp	r2, r3
 8004306:	d909      	bls.n	800431c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004308:	463b      	mov	r3, r7
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004312:	1ad2      	subs	r2, r2, r3
 8004314:	463b      	mov	r3, r7
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	621a      	str	r2, [r3, #32]
 800431a:	e008      	b.n	800432e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800431c:	463b      	mov	r3, r7
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004326:	463b      	mov	r3, r7
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	647b      	str	r3, [r7, #68]	; 0x44
 8004334:	463b      	mov	r3, r7
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d164      	bne.n	8004408 <USB_EPStartXfer+0x63c>
 800433e:	1d3b      	adds	r3, r7, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004344:	1d3b      	adds	r3, r7, #4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434c:	b29b      	uxth	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004352:	4413      	add	r3, r2
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004356:	463b      	mov	r3, r7
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	011a      	lsls	r2, r3, #4
 800435e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004360:	4413      	add	r3, r2
 8004362:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004366:	63bb      	str	r3, [r7, #56]	; 0x38
 8004368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d112      	bne.n	8004396 <USB_EPStartXfer+0x5ca>
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800437a:	b29a      	uxth	r2, r3
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438e:	b29a      	uxth	r2, r3
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	e054      	b.n	8004440 <USB_EPStartXfer+0x674>
 8004396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439a:	2b3e      	cmp	r3, #62	; 0x3e
 800439c:	d817      	bhi.n	80043ce <USB_EPStartXfer+0x602>
 800439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <USB_EPStartXfer+0x5f2>
 80043b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043b8:	3301      	adds	r3, #1
 80043ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	029b      	lsls	r3, r3, #10
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e038      	b.n	8004440 <USB_EPStartXfer+0x674>
 80043ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <USB_EPStartXfer+0x622>
 80043e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043e8:	3b01      	subs	r3, #1
 80043ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	029b      	lsls	r3, r3, #10
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004400:	b29a      	uxth	r2, r3
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	e01b      	b.n	8004440 <USB_EPStartXfer+0x674>
 8004408:	463b      	mov	r3, r7
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d116      	bne.n	8004440 <USB_EPStartXfer+0x674>
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004420:	4413      	add	r3, r2
 8004422:	647b      	str	r3, [r7, #68]	; 0x44
 8004424:	463b      	mov	r3, r7
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	011a      	lsls	r2, r3, #4
 800442c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442e:	4413      	add	r3, r2
 8004430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004434:	643b      	str	r3, [r7, #64]	; 0x40
 8004436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443a:	b29a      	uxth	r2, r3
 800443c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004440:	463b      	mov	r3, r7
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	895b      	ldrh	r3, [r3, #10]
 8004446:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6959      	ldr	r1, [r3, #20]
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004454:	b29b      	uxth	r3, r3
 8004456:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800445a:	1d38      	adds	r0, r7, #4
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f000 ff13 	bl	8005288 <USB_WritePMA>
 8004462:	e1e2      	b.n	800482a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004464:	463b      	mov	r3, r7
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	463b      	mov	r3, r7
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004488:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	463b      	mov	r3, r7
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	441a      	add	r2, r3
 800449a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	663b      	str	r3, [r7, #96]	; 0x60
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c6:	4413      	add	r3, r2
 80044c8:	663b      	str	r3, [r7, #96]	; 0x60
 80044ca:	463b      	mov	r3, r7
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	011a      	lsls	r2, r3, #4
 80044d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d4:	4413      	add	r3, r2
 80044d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80044e6:	463b      	mov	r3, r7
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	891b      	ldrh	r3, [r3, #8]
 80044ec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044f0:	463b      	mov	r3, r7
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6959      	ldr	r1, [r3, #20]
 80044f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004500:	1d38      	adds	r0, r7, #4
 8004502:	6800      	ldr	r0, [r0, #0]
 8004504:	f000 fec0 	bl	8005288 <USB_WritePMA>
 8004508:	e18f      	b.n	800482a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800450a:	1d3b      	adds	r3, r7, #4
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	463b      	mov	r3, r7
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 808f 	beq.w	8004644 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	67bb      	str	r3, [r7, #120]	; 0x78
 800452c:	463b      	mov	r3, r7
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d164      	bne.n	8004600 <USB_EPStartXfer+0x834>
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	673b      	str	r3, [r7, #112]	; 0x70
 800453c:	1d3b      	adds	r3, r7, #4
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004544:	b29b      	uxth	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800454a:	4413      	add	r3, r2
 800454c:	673b      	str	r3, [r7, #112]	; 0x70
 800454e:	463b      	mov	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	011a      	lsls	r2, r3, #4
 8004556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004558:	4413      	add	r3, r2
 800455a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800455e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d112      	bne.n	800458e <USB_EPStartXfer+0x7c2>
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004572:	b29a      	uxth	r2, r3
 8004574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004576:	801a      	strh	r2, [r3, #0]
 8004578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004586:	b29a      	uxth	r2, r3
 8004588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	e054      	b.n	8004638 <USB_EPStartXfer+0x86c>
 800458e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004592:	2b3e      	cmp	r3, #62	; 0x3e
 8004594:	d817      	bhi.n	80045c6 <USB_EPStartXfer+0x7fa>
 8004596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <USB_EPStartXfer+0x7ea>
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	3301      	adds	r3, #1
 80045b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	029b      	lsls	r3, r3, #10
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e038      	b.n	8004638 <USB_EPStartXfer+0x86c>
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <USB_EPStartXfer+0x81a>
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	3b01      	subs	r3, #1
 80045e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	029b      	lsls	r3, r3, #10
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fc:	801a      	strh	r2, [r3, #0]
 80045fe:	e01b      	b.n	8004638 <USB_EPStartXfer+0x86c>
 8004600:	463b      	mov	r3, r7
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	785b      	ldrb	r3, [r3, #1]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d116      	bne.n	8004638 <USB_EPStartXfer+0x86c>
 800460a:	1d3b      	adds	r3, r7, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004618:	4413      	add	r3, r2
 800461a:	67bb      	str	r3, [r7, #120]	; 0x78
 800461c:	463b      	mov	r3, r7
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	011a      	lsls	r2, r3, #4
 8004624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004626:	4413      	add	r3, r2
 8004628:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800462c:	677b      	str	r3, [r7, #116]	; 0x74
 800462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004632:	b29a      	uxth	r2, r3
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004638:	463b      	mov	r3, r7
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	895b      	ldrh	r3, [r3, #10]
 800463e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004642:	e097      	b.n	8004774 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004644:	463b      	mov	r3, r7
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d168      	bne.n	8004720 <USB_EPStartXfer+0x954>
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004666:	4413      	add	r3, r2
 8004668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	011a      	lsls	r2, r3, #4
 8004674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004678:	4413      	add	r3, r2
 800467a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800467e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d112      	bne.n	80046ae <USB_EPStartXfer+0x8e2>
 8004688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004692:	b29a      	uxth	r2, r3
 8004694:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004696:	801a      	strh	r2, [r3, #0]
 8004698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	e05d      	b.n	800476a <USB_EPStartXfer+0x99e>
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b2:	2b3e      	cmp	r3, #62	; 0x3e
 80046b4:	d817      	bhi.n	80046e6 <USB_EPStartXfer+0x91a>
 80046b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <USB_EPStartXfer+0x90a>
 80046cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046d0:	3301      	adds	r3, #1
 80046d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046da:	b29b      	uxth	r3, r3
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	b29a      	uxth	r2, r3
 80046e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	e041      	b.n	800476a <USB_EPStartXfer+0x99e>
 80046e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d104      	bne.n	8004706 <USB_EPStartXfer+0x93a>
 80046fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004700:	3b01      	subs	r3, #1
 8004702:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004706:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800470a:	b29b      	uxth	r3, r3
 800470c:	029b      	lsls	r3, r3, #10
 800470e:	b29b      	uxth	r3, r3
 8004710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004718:	b29a      	uxth	r2, r3
 800471a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e024      	b.n	800476a <USB_EPStartXfer+0x99e>
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d11f      	bne.n	800476a <USB_EPStartXfer+0x99e>
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004742:	4413      	add	r3, r2
 8004744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004748:	463b      	mov	r3, r7
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	011a      	lsls	r2, r3, #4
 8004750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004754:	4413      	add	r3, r2
 8004756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800475a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800475e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004762:	b29a      	uxth	r2, r3
 8004764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004768:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800476a:	463b      	mov	r3, r7
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	891b      	ldrh	r3, [r3, #8]
 8004770:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004774:	463b      	mov	r3, r7
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6959      	ldr	r1, [r3, #20]
 800477a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477e:	b29b      	uxth	r3, r3
 8004780:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004784:	1d38      	adds	r0, r7, #4
 8004786:	6800      	ldr	r0, [r0, #0]
 8004788:	f000 fd7e 	bl	8005288 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800478c:	463b      	mov	r3, r7
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	785b      	ldrb	r3, [r3, #1]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d122      	bne.n	80047dc <USB_EPStartXfer+0xa10>
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	463b      	mov	r3, r7
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80047b4:	1d3b      	adds	r3, r7, #4
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	463b      	mov	r3, r7
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	441a      	add	r2, r3
 80047c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80047c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8013      	strh	r3, [r2, #0]
 80047da:	e026      	b.n	800482a <USB_EPStartXfer+0xa5e>
 80047dc:	463b      	mov	r3, r7
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	785b      	ldrb	r3, [r3, #1]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d121      	bne.n	800482a <USB_EPStartXfer+0xa5e>
 80047e6:	1d3b      	adds	r3, r7, #4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	463b      	mov	r3, r7
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	463b      	mov	r3, r7
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	463b      	mov	r3, r7
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f107 020e 	add.w	r2, r7, #14
 8004840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004848:	8013      	strh	r3, [r2, #0]
 800484a:	f107 030e 	add.w	r3, r7, #14
 800484e:	f107 020e 	add.w	r2, r7, #14
 8004852:	8812      	ldrh	r2, [r2, #0]
 8004854:	f082 0210 	eor.w	r2, r2, #16
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	f107 030e 	add.w	r3, r7, #14
 800485e:	f107 020e 	add.w	r2, r7, #14
 8004862:	8812      	ldrh	r2, [r2, #0]
 8004864:	f082 0220 	eor.w	r2, r2, #32
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	463b      	mov	r3, r7
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	f107 030e 	add.w	r3, r7, #14
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
 8004892:	e3b5      	b.n	8005000 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004894:	463b      	mov	r3, r7
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	7b1b      	ldrb	r3, [r3, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 8090 	bne.w	80049c0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	463b      	mov	r3, r7
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d90e      	bls.n	80048ce <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80048b0:	463b      	mov	r3, r7
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80048ba:	463b      	mov	r3, r7
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c4:	1ad2      	subs	r2, r2, r3
 80048c6:	463b      	mov	r3, r7
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	619a      	str	r2, [r3, #24]
 80048cc:	e008      	b.n	80048e0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80048ce:	463b      	mov	r3, r7
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80048d8:	463b      	mov	r3, r7
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80048e0:	1d3b      	adds	r3, r7, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80048f8:	4413      	add	r3, r2
 80048fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048fe:	463b      	mov	r3, r7
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	011a      	lsls	r2, r3, #4
 8004906:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800490a:	4413      	add	r3, r2
 800490c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d116      	bne.n	800494a <USB_EPStartXfer+0xb7e>
 800491c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004928:	b29a      	uxth	r2, r3
 800492a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004940:	b29a      	uxth	r2, r3
 8004942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e32c      	b.n	8004fa4 <USB_EPStartXfer+0x11d8>
 800494a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494e:	2b3e      	cmp	r3, #62	; 0x3e
 8004950:	d818      	bhi.n	8004984 <USB_EPStartXfer+0xbb8>
 8004952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800495c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <USB_EPStartXfer+0xba6>
 8004968:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800496c:	3301      	adds	r3, #1
 800496e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004976:	b29b      	uxth	r3, r3
 8004978:	029b      	lsls	r3, r3, #10
 800497a:	b29a      	uxth	r2, r3
 800497c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	e30f      	b.n	8004fa4 <USB_EPStartXfer+0x11d8>
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	2b00      	cmp	r3, #0
 8004998:	d104      	bne.n	80049a4 <USB_EPStartXfer+0xbd8>
 800499a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800499e:	3b01      	subs	r3, #1
 80049a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80049a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	e2f1      	b.n	8004fa4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80049c0:	463b      	mov	r3, r7
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	78db      	ldrb	r3, [r3, #3]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	f040 818f 	bne.w	8004cea <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80049cc:	463b      	mov	r3, r7
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	785b      	ldrb	r3, [r3, #1]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d175      	bne.n	8004ac2 <USB_EPStartXfer+0xcf6>
 80049d6:	1d3b      	adds	r3, r7, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049ee:	4413      	add	r3, r2
 80049f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049f4:	463b      	mov	r3, r7
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	011a      	lsls	r2, r3, #4
 80049fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a00:	4413      	add	r3, r2
 8004a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d116      	bne.n	8004a42 <USB_EPStartXfer+0xc76>
 8004a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a3e:	801a      	strh	r2, [r3, #0]
 8004a40:	e065      	b.n	8004b0e <USB_EPStartXfer+0xd42>
 8004a42:	463b      	mov	r3, r7
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b3e      	cmp	r3, #62	; 0x3e
 8004a4a:	d81a      	bhi.n	8004a82 <USB_EPStartXfer+0xcb6>
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a58:	463b      	mov	r3, r7
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <USB_EPStartXfer+0xca4>
 8004a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	029b      	lsls	r3, r3, #10
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	e045      	b.n	8004b0e <USB_EPStartXfer+0xd42>
 8004a82:	463b      	mov	r3, r7
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a8e:	463b      	mov	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <USB_EPStartXfer+0xcda>
 8004a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	029b      	lsls	r3, r3, #10
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	e025      	b.n	8004b0e <USB_EPStartXfer+0xd42>
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d120      	bne.n	8004b0e <USB_EPStartXfer+0xd42>
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ad4:	1d3b      	adds	r3, r7, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aea:	463b      	mov	r3, r7
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	011a      	lsls	r2, r3, #4
 8004af2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004af6:	4413      	add	r3, r2
 8004af8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b00:	463b      	mov	r3, r7
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b16:	463b      	mov	r3, r7
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d175      	bne.n	8004c0c <USB_EPStartXfer+0xe40>
 8004b20:	1d3b      	adds	r3, r7, #4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b38:	4413      	add	r3, r2
 8004b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b3e:	463b      	mov	r3, r7
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	011a      	lsls	r2, r3, #4
 8004b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b54:	463b      	mov	r3, r7
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d116      	bne.n	8004b8c <USB_EPStartXfer+0xdc0>
 8004b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b70:	801a      	strh	r2, [r3, #0]
 8004b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	e061      	b.n	8004c50 <USB_EPStartXfer+0xe84>
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b3e      	cmp	r3, #62	; 0x3e
 8004b94:	d81a      	bhi.n	8004bcc <USB_EPStartXfer+0xe00>
 8004b96:	463b      	mov	r3, r7
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d004      	beq.n	8004bba <USB_EPStartXfer+0xdee>
 8004bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	029b      	lsls	r3, r3, #10
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bc8:	801a      	strh	r2, [r3, #0]
 8004bca:	e041      	b.n	8004c50 <USB_EPStartXfer+0xe84>
 8004bcc:	463b      	mov	r3, r7
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bd8:	463b      	mov	r3, r7
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <USB_EPStartXfer+0xe24>
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bea:	3b01      	subs	r3, #1
 8004bec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	029b      	lsls	r3, r3, #10
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e021      	b.n	8004c50 <USB_EPStartXfer+0xe84>
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d11c      	bne.n	8004c50 <USB_EPStartXfer+0xe84>
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c26:	4413      	add	r3, r2
 8004c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	011a      	lsls	r2, r3, #4
 8004c34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c38:	4413      	add	r3, r2
 8004c3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c42:	463b      	mov	r3, r7
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c4e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004c50:	463b      	mov	r3, r7
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 81a4 	beq.w	8004fa4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	463b      	mov	r3, r7
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004c70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <USB_EPStartXfer+0xebc>
 8004c7c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10d      	bne.n	8004ca4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004c88:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 8187 	bne.w	8004fa4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004c96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 8180 	bne.w	8004fa4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004ca4:	1d3b      	adds	r3, r7, #4
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	463b      	mov	r3, r7
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004cc2:	1d3b      	adds	r3, r7, #4
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]
 8004ce8:	e15c      	b.n	8004fa4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004cea:	463b      	mov	r3, r7
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	78db      	ldrb	r3, [r3, #3]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	f040 8155 	bne.w	8004fa0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004cf6:	463b      	mov	r3, r7
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d90e      	bls.n	8004d24 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004d06:	463b      	mov	r3, r7
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004d10:	463b      	mov	r3, r7
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	619a      	str	r2, [r3, #24]
 8004d22:	e008      	b.n	8004d36 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004d24:	463b      	mov	r3, r7
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004d2e:	463b      	mov	r3, r7
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d36:	463b      	mov	r3, r7
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d16f      	bne.n	8004e20 <USB_EPStartXfer+0x1054>
 8004d40:	1d3b      	adds	r3, r7, #4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d58:	4413      	add	r3, r2
 8004d5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d5e:	463b      	mov	r3, r7
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	011a      	lsls	r2, r3, #4
 8004d66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d116      	bne.n	8004daa <USB_EPStartXfer+0xfde>
 8004d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d8e:	801a      	strh	r2, [r3, #0]
 8004d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e05f      	b.n	8004e6a <USB_EPStartXfer+0x109e>
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dae:	2b3e      	cmp	r3, #62	; 0x3e
 8004db0:	d818      	bhi.n	8004de4 <USB_EPStartXfer+0x1018>
 8004db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <USB_EPStartXfer+0x1006>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dcc:	3301      	adds	r3, #1
 8004dce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	029b      	lsls	r3, r3, #10
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	e042      	b.n	8004e6a <USB_EPStartXfer+0x109e>
 8004de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <USB_EPStartXfer+0x1038>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e1c:	801a      	strh	r2, [r3, #0]
 8004e1e:	e024      	b.n	8004e6a <USB_EPStartXfer+0x109e>
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d11f      	bne.n	8004e6a <USB_EPStartXfer+0x109e>
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e42:	4413      	add	r3, r2
 8004e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e48:	463b      	mov	r3, r7
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	011a      	lsls	r2, r3, #4
 8004e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e54:	4413      	add	r3, r2
 8004e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	1d3b      	adds	r3, r7, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e72:	463b      	mov	r3, r7
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d16f      	bne.n	8004f5c <USB_EPStartXfer+0x1190>
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e94:	4413      	add	r3, r2
 8004e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	011a      	lsls	r2, r3, #4
 8004ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d116      	bne.n	8004ee6 <USB_EPStartXfer+0x111a>
 8004eb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004eca:	801a      	strh	r2, [r3, #0]
 8004ecc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	e05e      	b.n	8004fa4 <USB_EPStartXfer+0x11d8>
 8004ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eea:	2b3e      	cmp	r3, #62	; 0x3e
 8004eec:	d818      	bhi.n	8004f20 <USB_EPStartXfer+0x1154>
 8004eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <USB_EPStartXfer+0x1142>
 8004f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f08:	3301      	adds	r3, #1
 8004f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	e041      	b.n	8004fa4 <USB_EPStartXfer+0x11d8>
 8004f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <USB_EPStartXfer+0x1174>
 8004f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e023      	b.n	8004fa4 <USB_EPStartXfer+0x11d8>
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d11e      	bne.n	8004fa4 <USB_EPStartXfer+0x11d8>
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f76:	4413      	add	r3, r2
 8004f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	011a      	lsls	r2, r3, #4
 8004f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f88:	4413      	add	r3, r2
 8004f8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f9c:	801a      	strh	r2, [r3, #0]
 8004f9e:	e001      	b.n	8004fa4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e02e      	b.n	8005002 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fa4:	1d3b      	adds	r3, r7, #4
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004fc2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004fc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004fce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004fd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fd6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	463b      	mov	r3, r7
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	441a      	add	r2, r3
 8004fe8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	785b      	ldrb	r3, [r3, #1]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d020      	beq.n	8005060 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005034:	81bb      	strh	r3, [r7, #12]
 8005036:	89bb      	ldrh	r3, [r7, #12]
 8005038:	f083 0310 	eor.w	r3, r3, #16
 800503c:	81bb      	strh	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	89bb      	ldrh	r3, [r7, #12]
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]
 800505e:	e01f      	b.n	80050a0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	81fb      	strh	r3, [r7, #14]
 8005078:	89fb      	ldrh	r3, [r7, #14]
 800507a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800507e:	81fb      	strh	r3, [r7, #14]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	441a      	add	r2, r3
 800508a:	89fb      	ldrh	r3, [r7, #14]
 800508c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	b29b      	uxth	r3, r3
 800509e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	7b1b      	ldrb	r3, [r3, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 809d 	bne.w	80051fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d04c      	beq.n	8005162 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	823b      	strh	r3, [r7, #16]
 80050d6:	8a3b      	ldrh	r3, [r7, #16]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <USB_EPClearStall+0x6c>
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	81fb      	strh	r3, [r7, #14]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	89fb      	ldrh	r3, [r7, #14]
 8005104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005110:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005114:	b29b      	uxth	r3, r3
 8005116:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	78db      	ldrb	r3, [r3, #3]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d06c      	beq.n	80051fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005136:	81bb      	strh	r3, [r7, #12]
 8005138:	89bb      	ldrh	r3, [r7, #12]
 800513a:	f083 0320 	eor.w	r3, r3, #32
 800513e:	81bb      	strh	r3, [r7, #12]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	89bb      	ldrh	r3, [r7, #12]
 800514c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]
 8005160:	e04b      	b.n	80051fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	82fb      	strh	r3, [r7, #22]
 8005170:	8afb      	ldrh	r3, [r7, #22]
 8005172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01b      	beq.n	80051b2 <USB_EPClearStall+0x106>
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	82bb      	strh	r3, [r7, #20]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	441a      	add	r2, r3
 800519c:	8abb      	ldrh	r3, [r7, #20]
 800519e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	827b      	strh	r3, [r7, #18]
 80051ca:	8a7b      	ldrh	r3, [r7, #18]
 80051cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051d0:	827b      	strh	r3, [r7, #18]
 80051d2:	8a7b      	ldrh	r3, [r7, #18]
 80051d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051d8:	827b      	strh	r3, [r7, #18]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8a7b      	ldrh	r3, [r7, #18]
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr

08005206 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005262:	b29b      	uxth	r3, r3
 8005264:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005288:	b480      	push	{r7}
 800528a:	b08d      	sub	sp, #52	; 0x34
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4611      	mov	r1, r2
 8005294:	461a      	mov	r2, r3
 8005296:	460b      	mov	r3, r1
 8005298:	80fb      	strh	r3, [r7, #6]
 800529a:	4613      	mov	r3, r2
 800529c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800529e:	88bb      	ldrh	r3, [r7, #4]
 80052a0:	3301      	adds	r3, #1
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	005a      	lsls	r2, r3, #1
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c0:	e01e      	b.n	8005300 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	3301      	adds	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	3302      	adds	r3, #2
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	3302      	adds	r3, #2
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	3b01      	subs	r3, #1
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1dd      	bne.n	80052c2 <USB_WritePMA+0x3a>
  }
}
 8005306:	bf00      	nop
 8005308:	3734      	adds	r7, #52	; 0x34
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005310:	b480      	push	{r7}
 8005312:	b08b      	sub	sp, #44	; 0x2c
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	460b      	mov	r3, r1
 8005320:	80fb      	strh	r3, [r7, #6]
 8005322:	4613      	mov	r3, r2
 8005324:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005326:	88bb      	ldrh	r3, [r7, #4]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	005a      	lsls	r2, r3, #1
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005342:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
 8005348:	e01b      	b.n	8005382 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	3302      	adds	r3, #2
 8005356:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	3301      	adds	r3, #1
 8005364:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	0a1b      	lsrs	r3, r3, #8
 800536a:	b2da      	uxtb	r2, r3
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	3301      	adds	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	3302      	adds	r3, #2
 800537a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	3b01      	subs	r3, #1
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e0      	bne.n	800534a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005388:	88bb      	ldrh	r3, [r7, #4]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	701a      	strb	r2, [r3, #0]
  }
}
 80053a4:	bf00      	nop
 80053a6:	372c      	adds	r7, #44	; 0x2c
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	460b      	mov	r3, r1
 80053b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7c1b      	ldrb	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d115      	bne.n	80053f2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ca:	2202      	movs	r2, #2
 80053cc:	2181      	movs	r1, #129	; 0x81
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 fe1f 	bl	8007012 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053de:	2202      	movs	r2, #2
 80053e0:	2101      	movs	r1, #1
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f001 fe15 	bl	8007012 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80053f0:	e012      	b.n	8005418 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	2202      	movs	r2, #2
 80053f6:	2181      	movs	r1, #129	; 0x81
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 fe0a 	bl	8007012 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005404:	2340      	movs	r3, #64	; 0x40
 8005406:	2202      	movs	r2, #2
 8005408:	2101      	movs	r1, #1
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 fe01 	bl	8007012 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005418:	2308      	movs	r3, #8
 800541a:	2203      	movs	r2, #3
 800541c:	2182      	movs	r1, #130	; 0x82
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 fdf7 	bl	8007012 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800542a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800542e:	f001 ff17 	bl	8007260 <USBD_static_malloc>
 8005432:	4602      	mov	r2, r0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005444:	2301      	movs	r3, #1
 8005446:	73fb      	strb	r3, [r7, #15]
 8005448:	e026      	b.n	8005498 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005450:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	7c1b      	ldrb	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800547a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800547e:	2101      	movs	r1, #1
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 feb7 	bl	80071f4 <USBD_LL_PrepareReceive>
 8005486:	e007      	b.n	8005498 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800548e:	2340      	movs	r3, #64	; 0x40
 8005490:	2101      	movs	r1, #1
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f001 feae 	bl	80071f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	460b      	mov	r3, r1
 80054ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80054b2:	2181      	movs	r1, #129	; 0x81
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 fdd2 	bl	800705e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80054c0:	2101      	movs	r1, #1
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 fdcb 	bl	800705e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80054d0:	2182      	movs	r1, #130	; 0x82
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 fdc3 	bl	800705e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00e      	beq.n	8005506 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 febd 	bl	8007278 <USBD_static_free>
    pdev->pClassData = NULL;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005506:	7bfb      	ldrb	r3, [r7, #15]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005520:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005536:	2b00      	cmp	r3, #0
 8005538:	d039      	beq.n	80055ae <USBD_CDC_Setup+0x9e>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d17c      	bne.n	8005638 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	88db      	ldrh	r3, [r3, #6]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d029      	beq.n	800559a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	b25b      	sxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	da11      	bge.n	8005574 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800555c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	88d2      	ldrh	r2, [r2, #6]
 8005562:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005564:	6939      	ldr	r1, [r7, #16]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	88db      	ldrh	r3, [r3, #6]
 800556a:	461a      	mov	r2, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 f9c9 	bl	8006904 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005572:	e068      	b.n	8005646 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	785a      	ldrb	r2, [r3, #1]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	88db      	ldrh	r3, [r3, #6]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800558a:	6939      	ldr	r1, [r7, #16]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	88db      	ldrh	r3, [r3, #6]
 8005590:	461a      	mov	r2, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 f9e4 	bl	8006960 <USBD_CtlPrepareRx>
      break;
 8005598:	e055      	b.n	8005646 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	7850      	ldrb	r0, [r2, #1]
 80055a6:	2200      	movs	r2, #0
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	4798      	blx	r3
      break;
 80055ac:	e04b      	b.n	8005646 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b0a      	cmp	r3, #10
 80055b4:	d017      	beq.n	80055e6 <USBD_CDC_Setup+0xd6>
 80055b6:	2b0b      	cmp	r3, #11
 80055b8:	d029      	beq.n	800560e <USBD_CDC_Setup+0xfe>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d133      	bne.n	8005626 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d107      	bne.n	80055d8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80055c8:	f107 030c 	add.w	r3, r7, #12
 80055cc:	2202      	movs	r2, #2
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 f997 	bl	8006904 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055d6:	e02e      	b.n	8005636 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 f928 	bl	8006830 <USBD_CtlError>
            ret = USBD_FAIL;
 80055e0:	2302      	movs	r3, #2
 80055e2:	75fb      	strb	r3, [r7, #23]
          break;
 80055e4:	e027      	b.n	8005636 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d107      	bne.n	8005600 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80055f0:	f107 030f 	add.w	r3, r7, #15
 80055f4:	2201      	movs	r2, #1
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 f983 	bl	8006904 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055fe:	e01a      	b.n	8005636 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f001 f914 	bl	8006830 <USBD_CtlError>
            ret = USBD_FAIL;
 8005608:	2302      	movs	r3, #2
 800560a:	75fb      	strb	r3, [r7, #23]
          break;
 800560c:	e013      	b.n	8005636 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005614:	2b03      	cmp	r3, #3
 8005616:	d00d      	beq.n	8005634 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 f908 	bl	8006830 <USBD_CtlError>
            ret = USBD_FAIL;
 8005620:	2302      	movs	r3, #2
 8005622:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005624:	e006      	b.n	8005634 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 f901 	bl	8006830 <USBD_CtlError>
          ret = USBD_FAIL;
 800562e:	2302      	movs	r3, #2
 8005630:	75fb      	strb	r3, [r7, #23]
          break;
 8005632:	e000      	b.n	8005636 <USBD_CDC_Setup+0x126>
          break;
 8005634:	bf00      	nop
      }
      break;
 8005636:	e006      	b.n	8005646 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 f8f8 	bl	8006830 <USBD_CtlError>
      ret = USBD_FAIL;
 8005640:	2302      	movs	r3, #2
 8005642:	75fb      	strb	r3, [r7, #23]
      break;
 8005644:	bf00      	nop
  }

  return ret;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005662:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800566a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d03a      	beq.n	80056ec <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	331c      	adds	r3, #28
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d029      	beq.n	80056e0 <USBD_CDC_DataIn+0x90>
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	331c      	adds	r3, #28
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	78f9      	ldrb	r1, [r7, #3]
 80056a0:	68b8      	ldr	r0, [r7, #8]
 80056a2:	460b      	mov	r3, r1
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	4403      	add	r3, r0
 80056ac:	3338      	adds	r3, #56	; 0x38
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80056b4:	fb03 f301 	mul.w	r3, r3, r1
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d110      	bne.n	80056e0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	331c      	adds	r3, #28
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056d2:	78f9      	ldrb	r1, [r7, #3]
 80056d4:	2300      	movs	r3, #0
 80056d6:	2200      	movs	r2, #0
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 fd68 	bl	80071ae <USBD_LL_Transmit>
 80056de:	e003      	b.n	80056e8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	460b      	mov	r3, r1
 8005700:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005708:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fd93 	bl	800723a <USBD_LL_GetRxDataSize>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800573a:	4611      	mov	r1, r2
 800573c:	4798      	blx	r3

    return USBD_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005762:	2b00      	cmp	r3, #0
 8005764:	d015      	beq.n	8005792 <USBD_CDC_EP0_RxReady+0x46>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800576c:	2bff      	cmp	r3, #255	; 0xff
 800576e:	d010      	beq.n	8005792 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800577e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005786:	b292      	uxth	r2, r2
 8005788:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	22ff      	movs	r2, #255	; 0xff
 800578e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2243      	movs	r2, #67	; 0x43
 80057a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80057aa:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000094 	.word	0x20000094

080057bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2243      	movs	r2, #67	; 0x43
 80057c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80057ca:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000050 	.word	0x20000050

080057dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2243      	movs	r2, #67	; 0x43
 80057e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80057ea:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	200000d8 	.word	0x200000d8

080057fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	220a      	movs	r2, #10
 8005808:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800580a:	4b03      	ldr	r3, [pc, #12]	; (8005818 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	2000000c 	.word	0x2000000c

0800581c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005826:	2302      	movs	r3, #2
 8005828:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800588a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d017      	beq.n	80058ea <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7c1b      	ldrb	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d109      	bne.n	80058d6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058cc:	2101      	movs	r1, #1
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f001 fc90 	bl	80071f4 <USBD_LL_PrepareReceive>
 80058d4:	e007      	b.n	80058e6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058dc:	2340      	movs	r3, #64	; 0x40
 80058de:	2101      	movs	r1, #1
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 fc87 	bl	80071f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e000      	b.n	80058ec <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80058ea:	2302      	movs	r3, #2
  }
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005908:	2302      	movs	r3, #2
 800590a:	e01a      	b.n	8005942 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	79fa      	ldrb	r2, [r7, #7]
 8005938:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f001 faf4 	bl	8006f28 <USBD_LL_Init>

  return USBD_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d006      	beq.n	800596c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	73fb      	strb	r3, [r7, #15]
 800596a:	e001      	b.n	8005970 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800596c:	2302      	movs	r3, #2
 800596e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 fb29 	bl	8006fdc <USBD_LL_Start>

  return USBD_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80059b4:	2302      	movs	r3, #2
 80059b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	4611      	mov	r1, r2
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	4611      	mov	r1, r2
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3

  return USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 feca 	bl	80067b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d00c      	beq.n	8005a62 <USBD_LL_SetupStage+0x56>
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d302      	bcc.n	8005a52 <USBD_LL_SetupStage+0x46>
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d010      	beq.n	8005a72 <USBD_LL_SetupStage+0x66>
 8005a50:	e017      	b.n	8005a82 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f9ca 	bl	8005df4 <USBD_StdDevReq>
      break;
 8005a60:	e01a      	b.n	8005a98 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa2c 	bl	8005ec8 <USBD_StdItfReq>
      break;
 8005a70:	e012      	b.n	8005a98 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa6a 	bl	8005f54 <USBD_StdEPReq>
      break;
 8005a80:	e00a      	b.n	8005a98 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 fb03 	bl	800709c <USBD_LL_StallEP>
      break;
 8005a96:	bf00      	nop
  }

  return USBD_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ab0:	7afb      	ldrb	r3, [r7, #11]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d14b      	bne.n	8005b4e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005abc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d134      	bne.n	8005b32 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d919      	bls.n	8005b08 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	1ad2      	subs	r2, r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d203      	bcs.n	8005af6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	e002      	b.n	8005afc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 ff4b 	bl	800699c <USBD_CtlContinueRx>
 8005b06:	e038      	b.n	8005b7a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d105      	bne.n	8005b2a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 ff48 	bl	80069c0 <USBD_CtlSendStatus>
 8005b30:	e023      	b.n	8005b7a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b38:	2b05      	cmp	r3, #5
 8005b3a:	d11e      	bne.n	8005b7a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005b44:	2100      	movs	r1, #0
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f001 faa8 	bl	800709c <USBD_LL_StallEP>
 8005b4c:	e015      	b.n	8005b7a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d108      	bne.n	8005b76 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	7afa      	ldrb	r2, [r7, #11]
 8005b6e:	4611      	mov	r1, r2
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	4798      	blx	r3
 8005b74:	e001      	b.n	8005b7a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b76:	2302      	movs	r3, #2
 8005b78:	e000      	b.n	8005b7c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d17f      	bne.n	8005c98 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d15c      	bne.n	8005c62 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d915      	bls.n	8005be0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	1ad2      	subs	r2, r2, r3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 feb5 	bl	800693c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f001 fb0b 	bl	80071f4 <USBD_LL_PrepareReceive>
 8005bde:	e04e      	b.n	8005c7e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	6912      	ldr	r2, [r2, #16]
 8005be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bec:	fb02 f201 	mul.w	r2, r2, r1
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11c      	bne.n	8005c30 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d316      	bcc.n	8005c30 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d20f      	bcs.n	8005c30 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c10:	2200      	movs	r2, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fe91 	bl	800693c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c22:	2300      	movs	r3, #0
 8005c24:	2200      	movs	r2, #0
 8005c26:	2100      	movs	r1, #0
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f001 fae3 	bl	80071f4 <USBD_LL_PrepareReceive>
 8005c2e:	e026      	b.n	8005c7e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d105      	bne.n	8005c52 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005c52:	2180      	movs	r1, #128	; 0x80
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f001 fa21 	bl	800709c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fec3 	bl	80069e6 <USBD_CtlReceiveStatus>
 8005c60:	e00d      	b.n	8005c7e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d004      	beq.n	8005c76 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005c76:	2180      	movs	r1, #128	; 0x80
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f001 fa0f 	bl	800709c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d11d      	bne.n	8005cc4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fe83 	bl	8005994 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c96:	e015      	b.n	8005cc4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00d      	beq.n	8005cc0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d108      	bne.n	8005cc0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	7afa      	ldrb	r2, [r7, #11]
 8005cb8:	4611      	mov	r1, r2
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	4798      	blx	r3
 8005cbe:	e001      	b.n	8005cc4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e000      	b.n	8005cc6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cd6:	2340      	movs	r3, #64	; 0x40
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2100      	movs	r1, #0
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 f998 	bl	8007012 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2240      	movs	r2, #64	; 0x40
 8005cee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cf2:	2340      	movs	r3, #64	; 0x40
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2180      	movs	r1, #128	; 0x80
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 f98a 	bl	8007012 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2240      	movs	r2, #64	; 0x40
 8005d08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6852      	ldr	r2, [r2, #4]
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	4611      	mov	r1, r2
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
  }

  return USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2204      	movs	r2, #4
 8005d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr

08005d96 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d105      	bne.n	8005db4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d10b      	bne.n	8005dea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d004      	beq.n	8005e18 <USBD_StdDevReq+0x24>
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d002      	beq.n	8005e18 <USBD_StdDevReq+0x24>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <USBD_StdDevReq+0x34>
 8005e16:	e04c      	b.n	8005eb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
      break;
 8005e26:	e049      	b.n	8005ebc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	2b09      	cmp	r3, #9
 8005e2e:	d83a      	bhi.n	8005ea6 <USBD_StdDevReq+0xb2>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <USBD_StdDevReq+0x44>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e89 	.word	0x08005e89
 8005e3c:	08005e9d 	.word	0x08005e9d
 8005e40:	08005ea7 	.word	0x08005ea7
 8005e44:	08005e93 	.word	0x08005e93
 8005e48:	08005ea7 	.word	0x08005ea7
 8005e4c:	08005e6b 	.word	0x08005e6b
 8005e50:	08005e61 	.word	0x08005e61
 8005e54:	08005ea7 	.word	0x08005ea7
 8005e58:	08005e7f 	.word	0x08005e7f
 8005e5c:	08005e75 	.word	0x08005e75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9d4 	bl	8006210 <USBD_GetDescriptor>
          break;
 8005e68:	e022      	b.n	8005eb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fb37 	bl	80064e0 <USBD_SetAddress>
          break;
 8005e72:	e01d      	b.n	8005eb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fb74 	bl	8006564 <USBD_SetConfig>
          break;
 8005e7c:	e018      	b.n	8005eb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fbfd 	bl	8006680 <USBD_GetConfig>
          break;
 8005e86:	e013      	b.n	8005eb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fc2c 	bl	80066e8 <USBD_GetStatus>
          break;
 8005e90:	e00e      	b.n	8005eb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fc5a 	bl	800674e <USBD_SetFeature>
          break;
 8005e9a:	e009      	b.n	8005eb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fc69 	bl	8006776 <USBD_ClrFeature>
          break;
 8005ea4:	e004      	b.n	8005eb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fcc1 	bl	8006830 <USBD_CtlError>
          break;
 8005eae:	bf00      	nop
      }
      break;
 8005eb0:	e004      	b.n	8005ebc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fcbb 	bl	8006830 <USBD_CtlError>
      break;
 8005eba:	bf00      	nop
  }

  return ret;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop

08005ec8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d003      	beq.n	8005eea <USBD_StdItfReq+0x22>
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d001      	beq.n	8005eea <USBD_StdItfReq+0x22>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d12a      	bne.n	8005f40 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d81d      	bhi.n	8005f32 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	889b      	ldrh	r3, [r3, #4]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d813      	bhi.n	8005f28 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	88db      	ldrh	r3, [r3, #6]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d110      	bne.n	8005f3c <USBD_StdItfReq+0x74>
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10d      	bne.n	8005f3c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fd4d 	bl	80069c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f26:	e009      	b.n	8005f3c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fc80 	bl	8006830 <USBD_CtlError>
          break;
 8005f30:	e004      	b.n	8005f3c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fc7b 	bl	8006830 <USBD_CtlError>
          break;
 8005f3a:	e000      	b.n	8005f3e <USBD_StdItfReq+0x76>
          break;
 8005f3c:	bf00      	nop
      }
      break;
 8005f3e:	e004      	b.n	8005f4a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fc74 	bl	8006830 <USBD_CtlError>
      break;
 8005f48:	bf00      	nop
  }

  return USBD_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	889b      	ldrh	r3, [r3, #4]
 8005f66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d004      	beq.n	8005f7e <USBD_StdEPReq+0x2a>
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	d002      	beq.n	8005f7e <USBD_StdEPReq+0x2a>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <USBD_StdEPReq+0x3a>
 8005f7c:	e13d      	b.n	80061fa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
      break;
 8005f8c:	e13a      	b.n	8006204 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d10a      	bne.n	8005fb0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	e12a      	b.n	8006206 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d03e      	beq.n	8006036 <USBD_StdEPReq+0xe2>
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d002      	beq.n	8005fc2 <USBD_StdEPReq+0x6e>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d070      	beq.n	80060a2 <USBD_StdEPReq+0x14e>
 8005fc0:	e115      	b.n	80061ee <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d002      	beq.n	8005fd2 <USBD_StdEPReq+0x7e>
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d015      	beq.n	8005ffc <USBD_StdEPReq+0xa8>
 8005fd0:	e02b      	b.n	800602a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00c      	beq.n	8005ff2 <USBD_StdEPReq+0x9e>
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	2b80      	cmp	r3, #128	; 0x80
 8005fdc:	d009      	beq.n	8005ff2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 f85a 	bl	800709c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005fe8:	2180      	movs	r1, #128	; 0x80
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 f856 	bl	800709c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ff0:	e020      	b.n	8006034 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fc1b 	bl	8006830 <USBD_CtlError>
              break;
 8005ffa:	e01b      	b.n	8006034 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	885b      	ldrh	r3, [r3, #2]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10e      	bne.n	8006022 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006004:	7bbb      	ldrb	r3, [r7, #14]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <USBD_StdEPReq+0xce>
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	2b80      	cmp	r3, #128	; 0x80
 800600e:	d008      	beq.n	8006022 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	88db      	ldrh	r3, [r3, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 f83d 	bl	800709c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fccc 	bl	80069c0 <USBD_CtlSendStatus>

              break;
 8006028:	e004      	b.n	8006034 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fbff 	bl	8006830 <USBD_CtlError>
              break;
 8006032:	bf00      	nop
          }
          break;
 8006034:	e0e0      	b.n	80061f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800603c:	2b02      	cmp	r3, #2
 800603e:	d002      	beq.n	8006046 <USBD_StdEPReq+0xf2>
 8006040:	2b03      	cmp	r3, #3
 8006042:	d015      	beq.n	8006070 <USBD_StdEPReq+0x11c>
 8006044:	e026      	b.n	8006094 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00c      	beq.n	8006066 <USBD_StdEPReq+0x112>
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	2b80      	cmp	r3, #128	; 0x80
 8006050:	d009      	beq.n	8006066 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 f820 	bl	800709c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800605c:	2180      	movs	r1, #128	; 0x80
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 f81c 	bl	800709c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006064:	e01c      	b.n	80060a0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fbe1 	bl	8006830 <USBD_CtlError>
              break;
 800606e:	e017      	b.n	80060a0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	885b      	ldrh	r3, [r3, #2]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d112      	bne.n	800609e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 f827 	bl	80070da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fc97 	bl	80069c0 <USBD_CtlSendStatus>
              }
              break;
 8006092:	e004      	b.n	800609e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fbca 	bl	8006830 <USBD_CtlError>
              break;
 800609c:	e000      	b.n	80060a0 <USBD_StdEPReq+0x14c>
              break;
 800609e:	bf00      	nop
          }
          break;
 80060a0:	e0aa      	b.n	80061f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d002      	beq.n	80060b2 <USBD_StdEPReq+0x15e>
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d032      	beq.n	8006116 <USBD_StdEPReq+0x1c2>
 80060b0:	e097      	b.n	80061e2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <USBD_StdEPReq+0x174>
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d004      	beq.n	80060c8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fbb5 	bl	8006830 <USBD_CtlError>
                break;
 80060c6:	e091      	b.n	80061ec <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	da0b      	bge.n	80060e8 <USBD_StdEPReq+0x194>
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	3310      	adds	r3, #16
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	4413      	add	r3, r2
 80060e4:	3304      	adds	r3, #4
 80060e6:	e00b      	b.n	8006100 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4413      	add	r3, r2
 80060fe:	3304      	adds	r3, #4
 8006100:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2202      	movs	r2, #2
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fbf8 	bl	8006904 <USBD_CtlSendData>
              break;
 8006114:	e06a      	b.n	80061ec <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006116:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800611a:	2b00      	cmp	r3, #0
 800611c:	da11      	bge.n	8006142 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	f003 020f 	and.w	r2, r3, #15
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	3318      	adds	r3, #24
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d117      	bne.n	8006168 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fb78 	bl	8006830 <USBD_CtlError>
                  break;
 8006140:	e054      	b.n	80061ec <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	f003 020f 	and.w	r2, r3, #15
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb65 	bl	8006830 <USBD_CtlError>
                  break;
 8006166:	e041      	b.n	80061ec <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800616c:	2b00      	cmp	r3, #0
 800616e:	da0b      	bge.n	8006188 <USBD_StdEPReq+0x234>
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	3310      	adds	r3, #16
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4413      	add	r3, r2
 8006184:	3304      	adds	r3, #4
 8006186:	e00b      	b.n	80061a0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	3304      	adds	r3, #4
 80061a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <USBD_StdEPReq+0x25a>
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	2b80      	cmp	r3, #128	; 0x80
 80061ac:	d103      	bne.n	80061b6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e00e      	b.n	80061d4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 ffac 	bl	8007118 <USBD_LL_IsStallEP>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	e002      	b.n	80061d4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2202      	movs	r2, #2
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fb92 	bl	8006904 <USBD_CtlSendData>
              break;
 80061e0:	e004      	b.n	80061ec <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fb23 	bl	8006830 <USBD_CtlError>
              break;
 80061ea:	bf00      	nop
          }
          break;
 80061ec:	e004      	b.n	80061f8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fb1d 	bl	8006830 <USBD_CtlError>
          break;
 80061f6:	bf00      	nop
      }
      break;
 80061f8:	e004      	b.n	8006204 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fb17 	bl	8006830 <USBD_CtlError>
      break;
 8006202:	bf00      	nop
  }

  return ret;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	885b      	ldrh	r3, [r3, #2]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	2b06      	cmp	r3, #6
 8006232:	f200 8128 	bhi.w	8006486 <USBD_GetDescriptor+0x276>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <USBD_GetDescriptor+0x2c>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	08006259 	.word	0x08006259
 8006240:	08006271 	.word	0x08006271
 8006244:	080062b1 	.word	0x080062b1
 8006248:	08006487 	.word	0x08006487
 800624c:	08006487 	.word	0x08006487
 8006250:	08006427 	.word	0x08006427
 8006254:	08006453 	.word	0x08006453
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	7c12      	ldrb	r2, [r2, #16]
 8006264:	f107 0108 	add.w	r1, r7, #8
 8006268:	4610      	mov	r0, r2
 800626a:	4798      	blx	r3
 800626c:	60f8      	str	r0, [r7, #12]
      break;
 800626e:	e112      	b.n	8006496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7c1b      	ldrb	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10d      	bne.n	8006294 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	f107 0208 	add.w	r2, r7, #8
 8006284:	4610      	mov	r0, r2
 8006286:	4798      	blx	r3
 8006288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3301      	adds	r3, #1
 800628e:	2202      	movs	r2, #2
 8006290:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006292:	e100      	b.n	8006496 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	f107 0208 	add.w	r2, r7, #8
 80062a0:	4610      	mov	r0, r2
 80062a2:	4798      	blx	r3
 80062a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
      break;
 80062ae:	e0f2      	b.n	8006496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	885b      	ldrh	r3, [r3, #2]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	f200 80ac 	bhi.w	8006414 <USBD_GetDescriptor+0x204>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <USBD_GetDescriptor+0xb4>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062dd 	.word	0x080062dd
 80062c8:	08006311 	.word	0x08006311
 80062cc:	08006345 	.word	0x08006345
 80062d0:	08006379 	.word	0x08006379
 80062d4:	080063ad 	.word	0x080063ad
 80062d8:	080063e1 	.word	0x080063e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	7c12      	ldrb	r2, [r2, #16]
 80062f4:	f107 0108 	add.w	r1, r7, #8
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
 80062fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062fe:	e091      	b.n	8006424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fa94 	bl	8006830 <USBD_CtlError>
            err++;
 8006308:	7afb      	ldrb	r3, [r7, #11]
 800630a:	3301      	adds	r3, #1
 800630c:	72fb      	strb	r3, [r7, #11]
          break;
 800630e:	e089      	b.n	8006424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00b      	beq.n	8006334 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	7c12      	ldrb	r2, [r2, #16]
 8006328:	f107 0108 	add.w	r1, r7, #8
 800632c:	4610      	mov	r0, r2
 800632e:	4798      	blx	r3
 8006330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006332:	e077      	b.n	8006424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa7a 	bl	8006830 <USBD_CtlError>
            err++;
 800633c:	7afb      	ldrb	r3, [r7, #11]
 800633e:	3301      	adds	r3, #1
 8006340:	72fb      	strb	r3, [r7, #11]
          break;
 8006342:	e06f      	b.n	8006424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	7c12      	ldrb	r2, [r2, #16]
 800635c:	f107 0108 	add.w	r1, r7, #8
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
 8006364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006366:	e05d      	b.n	8006424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fa60 	bl	8006830 <USBD_CtlError>
            err++;
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	3301      	adds	r3, #1
 8006374:	72fb      	strb	r3, [r7, #11]
          break;
 8006376:	e055      	b.n	8006424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	7c12      	ldrb	r2, [r2, #16]
 8006390:	f107 0108 	add.w	r1, r7, #8
 8006394:	4610      	mov	r0, r2
 8006396:	4798      	blx	r3
 8006398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639a:	e043      	b.n	8006424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa46 	bl	8006830 <USBD_CtlError>
            err++;
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	3301      	adds	r3, #1
 80063a8:	72fb      	strb	r3, [r7, #11]
          break;
 80063aa:	e03b      	b.n	8006424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	7c12      	ldrb	r2, [r2, #16]
 80063c4:	f107 0108 	add.w	r1, r7, #8
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
 80063cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ce:	e029      	b.n	8006424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa2c 	bl	8006830 <USBD_CtlError>
            err++;
 80063d8:	7afb      	ldrb	r3, [r7, #11]
 80063da:	3301      	adds	r3, #1
 80063dc:	72fb      	strb	r3, [r7, #11]
          break;
 80063de:	e021      	b.n	8006424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	7c12      	ldrb	r2, [r2, #16]
 80063f8:	f107 0108 	add.w	r1, r7, #8
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006402:	e00f      	b.n	8006424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa12 	bl	8006830 <USBD_CtlError>
            err++;
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	3301      	adds	r3, #1
 8006410:	72fb      	strb	r3, [r7, #11]
          break;
 8006412:	e007      	b.n	8006424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa0a 	bl	8006830 <USBD_CtlError>
          err++;
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	3301      	adds	r3, #1
 8006420:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006422:	e038      	b.n	8006496 <USBD_GetDescriptor+0x286>
 8006424:	e037      	b.n	8006496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7c1b      	ldrb	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	f107 0208 	add.w	r2, r7, #8
 800643a:	4610      	mov	r0, r2
 800643c:	4798      	blx	r3
 800643e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006440:	e029      	b.n	8006496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f9f3 	bl	8006830 <USBD_CtlError>
        err++;
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	3301      	adds	r3, #1
 800644e:	72fb      	strb	r3, [r7, #11]
      break;
 8006450:	e021      	b.n	8006496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	7c1b      	ldrb	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10d      	bne.n	8006476 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	f107 0208 	add.w	r2, r7, #8
 8006466:	4610      	mov	r0, r2
 8006468:	4798      	blx	r3
 800646a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3301      	adds	r3, #1
 8006470:	2207      	movs	r2, #7
 8006472:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006474:	e00f      	b.n	8006496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f9d9 	bl	8006830 <USBD_CtlError>
        err++;
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	3301      	adds	r3, #1
 8006482:	72fb      	strb	r3, [r7, #11]
      break;
 8006484:	e007      	b.n	8006496 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f9d1 	bl	8006830 <USBD_CtlError>
      err++;
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	3301      	adds	r3, #1
 8006492:	72fb      	strb	r3, [r7, #11]
      break;
 8006494:	bf00      	nop
  }

  if (err != 0U)
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d11c      	bne.n	80064d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800649c:	893b      	ldrh	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d011      	beq.n	80064c6 <USBD_GetDescriptor+0x2b6>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	88db      	ldrh	r3, [r3, #6]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00d      	beq.n	80064c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	88da      	ldrh	r2, [r3, #6]
 80064ae:	893b      	ldrh	r3, [r7, #8]
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bf28      	it	cs
 80064b4:	4613      	movcs	r3, r2
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064ba:	893b      	ldrh	r3, [r7, #8]
 80064bc:	461a      	mov	r2, r3
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fa1f 	bl	8006904 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	88db      	ldrh	r3, [r3, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa76 	bl	80069c0 <USBD_CtlSendStatus>
 80064d4:	e000      	b.n	80064d8 <USBD_GetDescriptor+0x2c8>
    return;
 80064d6:	bf00      	nop
    }
  }
}
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop

080064e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	889b      	ldrh	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d130      	bne.n	8006554 <USBD_SetAddress+0x74>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	88db      	ldrh	r3, [r3, #6]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d12c      	bne.n	8006554 <USBD_SetAddress+0x74>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	885b      	ldrh	r3, [r3, #2]
 80064fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006500:	d828      	bhi.n	8006554 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	885b      	ldrh	r3, [r3, #2]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	2b03      	cmp	r3, #3
 8006516:	d104      	bne.n	8006522 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f988 	bl	8006830 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006520:	e01c      	b.n	800655c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	7bfa      	ldrb	r2, [r7, #15]
 8006526:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fe1e 	bl	8007170 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa43 	bl	80069c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006548:	e008      	b.n	800655c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006552:	e003      	b.n	800655c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f96a 	bl	8006830 <USBD_CtlError>
  }
}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	885b      	ldrh	r3, [r3, #2]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	4b41      	ldr	r3, [pc, #260]	; (800667c <USBD_SetConfig+0x118>)
 8006576:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006578:	4b40      	ldr	r3, [pc, #256]	; (800667c <USBD_SetConfig+0x118>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d904      	bls.n	800658a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f954 	bl	8006830 <USBD_CtlError>
 8006588:	e075      	b.n	8006676 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006590:	2b02      	cmp	r3, #2
 8006592:	d002      	beq.n	800659a <USBD_SetConfig+0x36>
 8006594:	2b03      	cmp	r3, #3
 8006596:	d023      	beq.n	80065e0 <USBD_SetConfig+0x7c>
 8006598:	e062      	b.n	8006660 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800659a:	4b38      	ldr	r3, [pc, #224]	; (800667c <USBD_SetConfig+0x118>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01a      	beq.n	80065d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80065a2:	4b36      	ldr	r3, [pc, #216]	; (800667c <USBD_SetConfig+0x118>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2203      	movs	r2, #3
 80065b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065b4:	4b31      	ldr	r3, [pc, #196]	; (800667c <USBD_SetConfig+0x118>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff f9f4 	bl	80059a8 <USBD_SetClassConfig>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d104      	bne.n	80065d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f931 	bl	8006830 <USBD_CtlError>
            return;
 80065ce:	e052      	b.n	8006676 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f9f5 	bl	80069c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80065d6:	e04e      	b.n	8006676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f9f1 	bl	80069c0 <USBD_CtlSendStatus>
        break;
 80065de:	e04a      	b.n	8006676 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80065e0:	4b26      	ldr	r3, [pc, #152]	; (800667c <USBD_SetConfig+0x118>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d112      	bne.n	800660e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80065f0:	4b22      	ldr	r3, [pc, #136]	; (800667c <USBD_SetConfig+0x118>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80065fa:	4b20      	ldr	r3, [pc, #128]	; (800667c <USBD_SetConfig+0x118>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff f9f0 	bl	80059e6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9da 	bl	80069c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800660c:	e033      	b.n	8006676 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800660e:	4b1b      	ldr	r3, [pc, #108]	; (800667c <USBD_SetConfig+0x118>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	429a      	cmp	r2, r3
 800661a:	d01d      	beq.n	8006658 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff f9de 	bl	80059e6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800662a:	4b14      	ldr	r3, [pc, #80]	; (800667c <USBD_SetConfig+0x118>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006634:	4b11      	ldr	r3, [pc, #68]	; (800667c <USBD_SetConfig+0x118>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff f9b4 	bl	80059a8 <USBD_SetClassConfig>
 8006640:	4603      	mov	r3, r0
 8006642:	2b02      	cmp	r3, #2
 8006644:	d104      	bne.n	8006650 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f8f1 	bl	8006830 <USBD_CtlError>
            return;
 800664e:	e012      	b.n	8006676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f9b5 	bl	80069c0 <USBD_CtlSendStatus>
        break;
 8006656:	e00e      	b.n	8006676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f9b1 	bl	80069c0 <USBD_CtlSendStatus>
        break;
 800665e:	e00a      	b.n	8006676 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f8e4 	bl	8006830 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <USBD_SetConfig+0x118>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff f9b9 	bl	80059e6 <USBD_ClrClassConfig>
        break;
 8006674:	bf00      	nop
    }
  }
}
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000198 	.word	0x20000198

08006680 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	88db      	ldrh	r3, [r3, #6]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d004      	beq.n	800669c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8cb 	bl	8006830 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800669a:	e021      	b.n	80066e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	db17      	blt.n	80066d6 <USBD_GetConfig+0x56>
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	dd02      	ble.n	80066b0 <USBD_GetConfig+0x30>
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d00b      	beq.n	80066c6 <USBD_GetConfig+0x46>
 80066ae:	e012      	b.n	80066d6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3308      	adds	r3, #8
 80066ba:	2201      	movs	r2, #1
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f920 	bl	8006904 <USBD_CtlSendData>
        break;
 80066c4:	e00c      	b.n	80066e0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2201      	movs	r2, #1
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f918 	bl	8006904 <USBD_CtlSendData>
        break;
 80066d4:	e004      	b.n	80066e0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8a9 	bl	8006830 <USBD_CtlError>
        break;
 80066de:	bf00      	nop
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f8:	3b01      	subs	r3, #1
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d81e      	bhi.n	800673c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	88db      	ldrh	r3, [r3, #6]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d004      	beq.n	8006710 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f891 	bl	8006830 <USBD_CtlError>
        break;
 800670e:	e01a      	b.n	8006746 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f043 0202 	orr.w	r2, r3, #2
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	330c      	adds	r3, #12
 8006730:	2202      	movs	r2, #2
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f8e5 	bl	8006904 <USBD_CtlSendData>
      break;
 800673a:	e004      	b.n	8006746 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f876 	bl	8006830 <USBD_CtlError>
      break;
 8006744:	bf00      	nop
  }
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	885b      	ldrh	r3, [r3, #2]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d106      	bne.n	800676e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f929 	bl	80069c0 <USBD_CtlSendStatus>
  }
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006786:	3b01      	subs	r3, #1
 8006788:	2b02      	cmp	r3, #2
 800678a:	d80b      	bhi.n	80067a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	885b      	ldrh	r3, [r3, #2]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10c      	bne.n	80067ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f90f 	bl	80069c0 <USBD_CtlSendStatus>
      }
      break;
 80067a2:	e004      	b.n	80067ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f842 	bl	8006830 <USBD_CtlError>
      break;
 80067ac:	e000      	b.n	80067b0 <USBD_ClrFeature+0x3a>
      break;
 80067ae:	bf00      	nop
  }
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	785a      	ldrb	r2, [r3, #1]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	3302      	adds	r3, #2
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	b29a      	uxth	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	3303      	adds	r3, #3
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	4413      	add	r3, r2
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	3304      	adds	r3, #4
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	3305      	adds	r3, #5
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	b29b      	uxth	r3, r3
 8006802:	4413      	add	r3, r2
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	3306      	adds	r3, #6
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	b29a      	uxth	r2, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	3307      	adds	r3, #7
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	b29b      	uxth	r3, r3
 800681e:	4413      	add	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	80da      	strh	r2, [r3, #6]

}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800683a:	2180      	movs	r1, #128	; 0x80
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fc2d 	bl	800709c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006842:	2100      	movs	r1, #0
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fc29 	bl	800709c <USBD_LL_StallEP>
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b086      	sub	sp, #24
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d032      	beq.n	80068ce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f834 	bl	80068d6 <USBD_GetLen>
 800686e:	4603      	mov	r3, r0
 8006870:	3301      	adds	r3, #1
 8006872:	b29b      	uxth	r3, r3
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	75fa      	strb	r2, [r7, #23]
 8006882:	461a      	mov	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4413      	add	r3, r2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	7812      	ldrb	r2, [r2, #0]
 800688c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	75fa      	strb	r2, [r7, #23]
 8006894:	461a      	mov	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4413      	add	r3, r2
 800689a:	2203      	movs	r2, #3
 800689c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800689e:	e012      	b.n	80068c6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	60fa      	str	r2, [r7, #12]
 80068a6:	7dfa      	ldrb	r2, [r7, #23]
 80068a8:	1c51      	adds	r1, r2, #1
 80068aa:	75f9      	strb	r1, [r7, #23]
 80068ac:	4611      	mov	r1, r2
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	440a      	add	r2, r1
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	75fa      	strb	r2, [r7, #23]
 80068bc:	461a      	mov	r2, r3
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4413      	add	r3, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e8      	bne.n	80068a0 <USBD_GetString+0x4e>
    }
  }
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80068e2:	e005      	b.n	80068f0 <USBD_GetLen+0x1a>
  {
    len++;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	3301      	adds	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3301      	adds	r3, #1
 80068ee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1f5      	bne.n	80068e4 <USBD_GetLen+0xe>
  }

  return len;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr

08006904 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	4613      	mov	r3, r2
 8006910:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2202      	movs	r2, #2
 8006916:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	2100      	movs	r1, #0
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fc3e 	bl	80071ae <USBD_LL_Transmit>

  return USBD_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	2100      	movs	r1, #0
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 fc2c 	bl	80071ae <USBD_LL_Transmit>

  return USBD_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4613      	mov	r3, r2
 800696c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2203      	movs	r2, #3
 8006972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	2100      	movs	r1, #0
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fc31 	bl	80071f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	2100      	movs	r1, #0
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fc1f 	bl	80071f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2204      	movs	r2, #4
 80069cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069d0:	2300      	movs	r3, #0
 80069d2:	2200      	movs	r2, #0
 80069d4:	2100      	movs	r1, #0
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fbe9 	bl	80071ae <USBD_LL_Transmit>

  return USBD_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2205      	movs	r2, #5
 80069f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069f6:	2300      	movs	r3, #0
 80069f8:	2200      	movs	r2, #0
 80069fa:	2100      	movs	r1, #0
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fbf9 	bl	80071f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a10:	2200      	movs	r2, #0
 8006a12:	4912      	ldr	r1, [pc, #72]	; (8006a5c <MX_USB_DEVICE_Init+0x50>)
 8006a14:	4812      	ldr	r0, [pc, #72]	; (8006a60 <MX_USB_DEVICE_Init+0x54>)
 8006a16:	f7fe ff6d 	bl	80058f4 <USBD_Init>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a20:	f7f9 fc5c 	bl	80002dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a24:	490f      	ldr	r1, [pc, #60]	; (8006a64 <MX_USB_DEVICE_Init+0x58>)
 8006a26:	480e      	ldr	r0, [pc, #56]	; (8006a60 <MX_USB_DEVICE_Init+0x54>)
 8006a28:	f7fe ff8f 	bl	800594a <USBD_RegisterClass>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a32:	f7f9 fc53 	bl	80002dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a36:	490c      	ldr	r1, [pc, #48]	; (8006a68 <MX_USB_DEVICE_Init+0x5c>)
 8006a38:	4809      	ldr	r0, [pc, #36]	; (8006a60 <MX_USB_DEVICE_Init+0x54>)
 8006a3a:	f7fe feef 	bl	800581c <USBD_CDC_RegisterInterface>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a44:	f7f9 fc4a 	bl	80002dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a48:	4805      	ldr	r0, [pc, #20]	; (8006a60 <MX_USB_DEVICE_Init+0x54>)
 8006a4a:	f7fe ff97 	bl	800597c <USBD_Start>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a54:	f7f9 fc42 	bl	80002dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a58:	bf00      	nop
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	2000012c 	.word	0x2000012c
 8006a60:	2000044c 	.word	0x2000044c
 8006a64:	20000018 	.word	0x20000018
 8006a68:	2000011c 	.word	0x2000011c

08006a6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a70:	2200      	movs	r2, #0
 8006a72:	4905      	ldr	r1, [pc, #20]	; (8006a88 <CDC_Init_FS+0x1c>)
 8006a74:	4805      	ldr	r0, [pc, #20]	; (8006a8c <CDC_Init_FS+0x20>)
 8006a76:	f7fe fee7 	bl	8005848 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a7a:	4905      	ldr	r1, [pc, #20]	; (8006a90 <CDC_Init_FS+0x24>)
 8006a7c:	4803      	ldr	r0, [pc, #12]	; (8006a8c <CDC_Init_FS+0x20>)
 8006a7e:	f7fe fefc 	bl	800587a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000af8 	.word	0x20000af8
 8006a8c:	2000044c 	.word	0x2000044c
 8006a90:	20000710 	.word	0x20000710

08006a94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
	...

08006aa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	6039      	str	r1, [r7, #0]
 8006aae:	71fb      	strb	r3, [r7, #7]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	2b23      	cmp	r3, #35	; 0x23
 8006ab8:	d84a      	bhi.n	8006b50 <CDC_Control_FS+0xac>
 8006aba:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <CDC_Control_FS+0x1c>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006b51 	.word	0x08006b51
 8006ac4:	08006b51 	.word	0x08006b51
 8006ac8:	08006b51 	.word	0x08006b51
 8006acc:	08006b51 	.word	0x08006b51
 8006ad0:	08006b51 	.word	0x08006b51
 8006ad4:	08006b51 	.word	0x08006b51
 8006ad8:	08006b51 	.word	0x08006b51
 8006adc:	08006b51 	.word	0x08006b51
 8006ae0:	08006b51 	.word	0x08006b51
 8006ae4:	08006b51 	.word	0x08006b51
 8006ae8:	08006b51 	.word	0x08006b51
 8006aec:	08006b51 	.word	0x08006b51
 8006af0:	08006b51 	.word	0x08006b51
 8006af4:	08006b51 	.word	0x08006b51
 8006af8:	08006b51 	.word	0x08006b51
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006b51 	.word	0x08006b51
 8006b04:	08006b51 	.word	0x08006b51
 8006b08:	08006b51 	.word	0x08006b51
 8006b0c:	08006b51 	.word	0x08006b51
 8006b10:	08006b51 	.word	0x08006b51
 8006b14:	08006b51 	.word	0x08006b51
 8006b18:	08006b51 	.word	0x08006b51
 8006b1c:	08006b51 	.word	0x08006b51
 8006b20:	08006b51 	.word	0x08006b51
 8006b24:	08006b51 	.word	0x08006b51
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b51 	.word	0x08006b51
 8006b30:	08006b51 	.word	0x08006b51
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	08006b51 	.word	0x08006b51
 8006b3c:	08006b51 	.word	0x08006b51
 8006b40:	08006b51 	.word	0x08006b51
 8006b44:	08006b51 	.word	0x08006b51
 8006b48:	08006b51 	.word	0x08006b51
 8006b4c:	08006b51 	.word	0x08006b51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006b50:	bf00      	nop
  }

  return (USBD_OK);
 8006b52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4805      	ldr	r0, [pc, #20]	; (8006b84 <CDC_Receive_FS+0x24>)
 8006b6e:	f7fe fe84 	bl	800587a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b72:	4804      	ldr	r0, [pc, #16]	; (8006b84 <CDC_Receive_FS+0x24>)
 8006b74:	f7fe fe94 	bl	80058a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006b78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	2000044c 	.word	0x2000044c

08006b88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2212      	movs	r2, #18
 8006b98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b9a:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000148 	.word	0x20000148

08006bac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	6039      	str	r1, [r7, #0]
 8006bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	2000015c 	.word	0x2000015c

08006bd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	6039      	str	r1, [r7, #0]
 8006bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d105      	bne.n	8006bee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	4907      	ldr	r1, [pc, #28]	; (8006c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8006be6:	4808      	ldr	r0, [pc, #32]	; (8006c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8006be8:	f7ff fe33 	bl	8006852 <USBD_GetString>
 8006bec:	e004      	b.n	8006bf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	4904      	ldr	r1, [pc, #16]	; (8006c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bf2:	4805      	ldr	r0, [pc, #20]	; (8006c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bf4:	f7ff fe2d 	bl	8006852 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bf8:	4b02      	ldr	r3, [pc, #8]	; (8006c04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000ee0 	.word	0x20000ee0
 8006c08:	0800737c 	.word	0x0800737c

08006c0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	6039      	str	r1, [r7, #0]
 8006c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	4904      	ldr	r1, [pc, #16]	; (8006c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c1c:	4804      	ldr	r0, [pc, #16]	; (8006c30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c1e:	f7ff fe18 	bl	8006852 <USBD_GetString>
  return USBD_StrDesc;
 8006c22:	4b02      	ldr	r3, [pc, #8]	; (8006c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000ee0 	.word	0x20000ee0
 8006c30:	08007394 	.word	0x08007394

08006c34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	6039      	str	r1, [r7, #0]
 8006c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	221a      	movs	r2, #26
 8006c44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c46:	f000 f843 	bl	8006cd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c4a:	4b02      	ldr	r3, [pc, #8]	; (8006c54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20000160 	.word	0x20000160

08006c58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	6039      	str	r1, [r7, #0]
 8006c62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	4907      	ldr	r1, [pc, #28]	; (8006c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c6e:	4808      	ldr	r0, [pc, #32]	; (8006c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c70:	f7ff fdef 	bl	8006852 <USBD_GetString>
 8006c74:	e004      	b.n	8006c80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	4904      	ldr	r1, [pc, #16]	; (8006c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c7a:	4805      	ldr	r0, [pc, #20]	; (8006c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c7c:	f7ff fde9 	bl	8006852 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c80:	4b02      	ldr	r3, [pc, #8]	; (8006c8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000ee0 	.word	0x20000ee0
 8006c90:	080073a8 	.word	0x080073a8

08006c94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	6039      	str	r1, [r7, #0]
 8006c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d105      	bne.n	8006cb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	4907      	ldr	r1, [pc, #28]	; (8006cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006caa:	4808      	ldr	r0, [pc, #32]	; (8006ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cac:	f7ff fdd1 	bl	8006852 <USBD_GetString>
 8006cb0:	e004      	b.n	8006cbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	4904      	ldr	r1, [pc, #16]	; (8006cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cb6:	4805      	ldr	r0, [pc, #20]	; (8006ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cb8:	f7ff fdcb 	bl	8006852 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cbc:	4b02      	ldr	r3, [pc, #8]	; (8006cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000ee0 	.word	0x20000ee0
 8006ccc:	080073b4 	.word	0x080073b4

08006cd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <Get_SerialNum+0x44>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cdc:	4b0e      	ldr	r3, [pc, #56]	; (8006d18 <Get_SerialNum+0x48>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <Get_SerialNum+0x4c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cf6:	2208      	movs	r2, #8
 8006cf8:	4909      	ldr	r1, [pc, #36]	; (8006d20 <Get_SerialNum+0x50>)
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f814 	bl	8006d28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d00:	2204      	movs	r2, #4
 8006d02:	4908      	ldr	r1, [pc, #32]	; (8006d24 <Get_SerialNum+0x54>)
 8006d04:	68b8      	ldr	r0, [r7, #8]
 8006d06:	f000 f80f 	bl	8006d28 <IntToUnicode>
  }
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	1ffff7e8 	.word	0x1ffff7e8
 8006d18:	1ffff7ec 	.word	0x1ffff7ec
 8006d1c:	1ffff7f0 	.word	0x1ffff7f0
 8006d20:	20000162 	.word	0x20000162
 8006d24:	20000172 	.word	0x20000172

08006d28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	75fb      	strb	r3, [r7, #23]
 8006d3e:	e027      	b.n	8006d90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	0f1b      	lsrs	r3, r3, #28
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	d80b      	bhi.n	8006d60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	0f1b      	lsrs	r3, r3, #28
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	4619      	mov	r1, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	440b      	add	r3, r1
 8006d58:	3230      	adds	r2, #48	; 0x30
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	e00a      	b.n	8006d76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	0f1b      	lsrs	r3, r3, #28
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	440b      	add	r3, r1
 8006d70:	3237      	adds	r2, #55	; 0x37
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	3301      	adds	r3, #1
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	4413      	add	r3, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	75fb      	strb	r3, [r7, #23]
 8006d90:	7dfa      	ldrb	r2, [r7, #23]
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d3d3      	bcc.n	8006d40 <IntToUnicode+0x18>
  }
}
 8006d98:	bf00      	nop
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr
	...

08006da4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a0d      	ldr	r2, [pc, #52]	; (8006de8 <HAL_PCD_MspInit+0x44>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d113      	bne.n	8006dde <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <HAL_PCD_MspInit+0x48>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4a0c      	ldr	r2, [pc, #48]	; (8006dec <HAL_PCD_MspInit+0x48>)
 8006dbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dc0:	61d3      	str	r3, [r2, #28]
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <HAL_PCD_MspInit+0x48>)
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	2014      	movs	r0, #20
 8006dd4:	f7f9 fca9 	bl	800072a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006dd8:	2014      	movs	r0, #20
 8006dda:	f7f9 fcc2 	bl	8000762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40005c00 	.word	0x40005c00
 8006dec:	40021000 	.word	0x40021000

08006df0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7fe fe00 	bl	8005a0c <USBD_LL_SetupStage>
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	440b      	add	r3, r1
 8006e34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f7fe fe30 	bl	8005aa2 <USBD_LL_DataOutStage>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006e5c:	78fa      	ldrb	r2, [r7, #3]
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	440b      	add	r3, r1
 8006e6a:	333c      	adds	r3, #60	; 0x3c
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7fe fe87 	bl	8005b84 <USBD_LL_DataInStage>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe ff97 	bl	8005dc0 <USBD_LL_SOF>
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d001      	beq.n	8006eb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006eae:	f7f9 fa15 	bl	80002dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006eb8:	7bfa      	ldrb	r2, [r7, #15]
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fe ff47 	bl	8005d50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe ff00 	bl	8005cce <USBD_LL_Reset>
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe ff41 	bl	8005d6e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ef4:	4b04      	ldr	r3, [pc, #16]	; (8006f08 <HAL_PCD_SuspendCallback+0x30>)
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	4a03      	ldr	r2, [pc, #12]	; (8006f08 <HAL_PCD_SuspendCallback+0x30>)
 8006efa:	f043 0306 	orr.w	r3, r3, #6
 8006efe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	e000ed00 	.word	0xe000ed00

08006f0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe ff3b 	bl	8005d96 <USBD_LL_Resume>
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006f30:	4a28      	ldr	r2, [pc, #160]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a26      	ldr	r2, [pc, #152]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006f40:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f42:	4a25      	ldr	r2, [pc, #148]	; (8006fd8 <USBD_LL_Init+0xb0>)
 8006f44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006f46:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f48:	2208      	movs	r2, #8
 8006f4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f4c:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f4e:	2202      	movs	r2, #2
 8006f50:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f52:	4b20      	ldr	r3, [pc, #128]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f58:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f5e:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f64:	481b      	ldr	r0, [pc, #108]	; (8006fd4 <USBD_LL_Init+0xac>)
 8006f66:	f7f9 fd65 	bl	8000a34 <HAL_PCD_Init>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f70:	f7f9 f9b4 	bl	80002dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f7a:	2318      	movs	r3, #24
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2100      	movs	r1, #0
 8006f80:	f7fb f899 	bl	80020b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f8a:	2358      	movs	r3, #88	; 0x58
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2180      	movs	r1, #128	; 0x80
 8006f90:	f7fb f891 	bl	80020b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f9a:	23c0      	movs	r3, #192	; 0xc0
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2181      	movs	r1, #129	; 0x81
 8006fa0:	f7fb f889 	bl	80020b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006faa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	f7fb f880 	bl	80020b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2182      	movs	r1, #130	; 0x82
 8006fc4:	f7fb f877 	bl	80020b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200010e0 	.word	0x200010e0
 8006fd8:	40005c00 	.word	0x40005c00

08006fdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7f9 fe29 	bl	8000c4a <HAL_PCD_Start>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f94e 	bl	80072a0 <USBD_Get_USB_Status>
 8007004:	4603      	mov	r3, r0
 8007006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007008:	7bbb      	ldrb	r3, [r7, #14]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	461a      	mov	r2, r3
 8007020:	4603      	mov	r3, r0
 8007022:	70fb      	strb	r3, [r7, #3]
 8007024:	460b      	mov	r3, r1
 8007026:	70bb      	strb	r3, [r7, #2]
 8007028:	4613      	mov	r3, r2
 800702a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800703a:	78bb      	ldrb	r3, [r7, #2]
 800703c:	883a      	ldrh	r2, [r7, #0]
 800703e:	78f9      	ldrb	r1, [r7, #3]
 8007040:	f7f9 ffa3 	bl	8000f8a <HAL_PCD_EP_Open>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f928 	bl	80072a0 <USBD_Get_USB_Status>
 8007050:	4603      	mov	r3, r0
 8007052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007054:	7bbb      	ldrb	r3, [r7, #14]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f7f9 ffea 	bl	8001056 <HAL_PCD_EP_Close>
 8007082:	4603      	mov	r3, r0
 8007084:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	4618      	mov	r0, r3
 800708a:	f000 f909 	bl	80072a0 <USBD_Get_USB_Status>
 800708e:	4603      	mov	r3, r0
 8007090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007092:	7bbb      	ldrb	r3, [r7, #14]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fa f8aa 	bl	8001214 <HAL_PCD_EP_SetStall>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f8ea 	bl	80072a0 <USBD_Get_USB_Status>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070f4:	78fa      	ldrb	r2, [r7, #3]
 80070f6:	4611      	mov	r1, r2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fa f8eb 	bl	80012d4 <HAL_PCD_EP_ClrStall>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	4618      	mov	r0, r3
 8007106:	f000 f8cb 	bl	80072a0 <USBD_Get_USB_Status>
 800710a:	4603      	mov	r3, r0
 800710c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800710e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800712a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800712c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007130:	2b00      	cmp	r3, #0
 8007132:	da0c      	bge.n	800714e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713a:	68f9      	ldr	r1, [r7, #12]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	440b      	add	r3, r1
 8007148:	3302      	adds	r3, #2
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	e00b      	b.n	8007166 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007154:	68f9      	ldr	r1, [r7, #12]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	440b      	add	r3, r1
 8007160:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007164:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr

08007170 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	4611      	mov	r1, r2
 800718e:	4618      	mov	r0, r3
 8007190:	f7f9 fed6 	bl	8000f40 <HAL_PCD_SetAddress>
 8007194:	4603      	mov	r3, r0
 8007196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f880 	bl	80072a0 <USBD_Get_USB_Status>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b086      	sub	sp, #24
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	461a      	mov	r2, r3
 80071ba:	460b      	mov	r3, r1
 80071bc:	72fb      	strb	r3, [r7, #11]
 80071be:	4613      	mov	r3, r2
 80071c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071d0:	893b      	ldrh	r3, [r7, #8]
 80071d2:	7af9      	ldrb	r1, [r7, #11]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	f7f9 ffda 	bl	800118e <HAL_PCD_EP_Transmit>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 f85d 	bl	80072a0 <USBD_Get_USB_Status>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	461a      	mov	r2, r3
 8007200:	460b      	mov	r3, r1
 8007202:	72fb      	strb	r3, [r7, #11]
 8007204:	4613      	mov	r3, r2
 8007206:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007216:	893b      	ldrh	r3, [r7, #8]
 8007218:	7af9      	ldrb	r1, [r7, #11]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	f7f9 ff63 	bl	80010e6 <HAL_PCD_EP_Receive>
 8007220:	4603      	mov	r3, r0
 8007222:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f83a 	bl	80072a0 <USBD_Get_USB_Status>
 800722c:	4603      	mov	r3, r0
 800722e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007230:	7dbb      	ldrb	r3, [r7, #22]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	460b      	mov	r3, r1
 8007244:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	4611      	mov	r1, r2
 8007250:	4618      	mov	r0, r3
 8007252:	f7f9 ff85 	bl	8001160 <HAL_PCD_EP_GetRxCount>
 8007256:	4603      	mov	r3, r0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007268:	4b02      	ldr	r3, [pc, #8]	; (8007274 <USBD_static_malloc+0x14>)
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr
 8007274:	2000019c 	.word	0x2000019c

08007278 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]

}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	bc80      	pop	{r7}
 8007288:	4770      	bx	lr

0800728a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	bc80      	pop	{r7}
 800729e:	4770      	bx	lr

080072a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d817      	bhi.n	80072e4 <USBD_Get_USB_Status+0x44>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <USBD_Get_USB_Status+0x1c>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072cd 	.word	0x080072cd
 80072c0:	080072d3 	.word	0x080072d3
 80072c4:	080072d9 	.word	0x080072d9
 80072c8:	080072df 	.word	0x080072df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
    break;
 80072d0:	e00b      	b.n	80072ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072d2:	2302      	movs	r3, #2
 80072d4:	73fb      	strb	r3, [r7, #15]
    break;
 80072d6:	e008      	b.n	80072ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
    break;
 80072dc:	e005      	b.n	80072ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072de:	2302      	movs	r3, #2
 80072e0:	73fb      	strb	r3, [r7, #15]
    break;
 80072e2:	e002      	b.n	80072ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072e4:	2302      	movs	r3, #2
 80072e6:	73fb      	strb	r3, [r7, #15]
    break;
 80072e8:	bf00      	nop
  }
  return usb_status;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop

080072f8 <__libc_init_array>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	2500      	movs	r5, #0
 80072fc:	4e0c      	ldr	r6, [pc, #48]	; (8007330 <__libc_init_array+0x38>)
 80072fe:	4c0d      	ldr	r4, [pc, #52]	; (8007334 <__libc_init_array+0x3c>)
 8007300:	1ba4      	subs	r4, r4, r6
 8007302:	10a4      	asrs	r4, r4, #2
 8007304:	42a5      	cmp	r5, r4
 8007306:	d109      	bne.n	800731c <__libc_init_array+0x24>
 8007308:	f000 f822 	bl	8007350 <_init>
 800730c:	2500      	movs	r5, #0
 800730e:	4e0a      	ldr	r6, [pc, #40]	; (8007338 <__libc_init_array+0x40>)
 8007310:	4c0a      	ldr	r4, [pc, #40]	; (800733c <__libc_init_array+0x44>)
 8007312:	1ba4      	subs	r4, r4, r6
 8007314:	10a4      	asrs	r4, r4, #2
 8007316:	42a5      	cmp	r5, r4
 8007318:	d105      	bne.n	8007326 <__libc_init_array+0x2e>
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007320:	4798      	blx	r3
 8007322:	3501      	adds	r5, #1
 8007324:	e7ee      	b.n	8007304 <__libc_init_array+0xc>
 8007326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800732a:	4798      	blx	r3
 800732c:	3501      	adds	r5, #1
 800732e:	e7f2      	b.n	8007316 <__libc_init_array+0x1e>
 8007330:	080073dc 	.word	0x080073dc
 8007334:	080073dc 	.word	0x080073dc
 8007338:	080073dc 	.word	0x080073dc
 800733c:	080073e0 	.word	0x080073e0

08007340 <memset>:
 8007340:	4603      	mov	r3, r0
 8007342:	4402      	add	r2, r0
 8007344:	4293      	cmp	r3, r2
 8007346:	d100      	bne.n	800734a <memset+0xa>
 8007348:	4770      	bx	lr
 800734a:	f803 1b01 	strb.w	r1, [r3], #1
 800734e:	e7f9      	b.n	8007344 <memset+0x4>

08007350 <_init>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr

0800735c <_fini>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr
